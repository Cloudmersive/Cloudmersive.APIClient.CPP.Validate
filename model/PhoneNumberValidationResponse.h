/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PhoneNumberValidationResponse.h
 *
 * Result from validating a phone number
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_PhoneNumberValidationResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_PhoneNumberValidationResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Result from validating a phone number
/// </summary>
class  PhoneNumberValidationResponse
    : public ModelBase
{
public:
    PhoneNumberValidationResponse();
    virtual ~PhoneNumberValidationResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PhoneNumberValidationResponse members

    /// <summary>
    /// True if the phone number is valid, false otherwise
    /// </summary>
    bool isIsValid() const;
    bool isValidIsSet() const;
    void unsetIsValid();
    void setIsValid(bool value);
    /// <summary>
    /// True if the operation was successful, false if there was an error during validation.  See IsValid for validation result.
    /// </summary>
    bool isSuccessful() const;
    bool successfulIsSet() const;
    void unsetSuccessful();
    void setSuccessful(bool value);
    /// <summary>
    /// Type of phone number; possible values are: FixedLine, Mobile, FixedLineOrMobile, TollFree, PremiumRate,   SharedCost, Voip, PersonalNumber, Pager, Uan, Voicemail, Unknown
    /// </summary>
    utility::string_t getPhoneNumberType() const;
    bool phoneNumberTypeIsSet() const;
    void unsetPhoneNumberType();
    void setPhoneNumberType(utility::string_t value);
    /// <summary>
    /// E.164 format of the phone number
    /// </summary>
    utility::string_t getE164Format() const;
    bool e164FormatIsSet() const;
    void unsetE164Format();
    void setE164Format(utility::string_t value);
    /// <summary>
    /// Internaltional format of the phone number
    /// </summary>
    utility::string_t getInternationalFormat() const;
    bool internationalFormatIsSet() const;
    void unsetInternationalFormat();
    void setInternationalFormat(utility::string_t value);
    /// <summary>
    /// National format of the phone number
    /// </summary>
    utility::string_t getNationalFormat() const;
    bool nationalFormatIsSet() const;
    void unsetNationalFormat();
    void setNationalFormat(utility::string_t value);
    /// <summary>
    /// Two digit country code of the phone number
    /// </summary>
    utility::string_t getCountryCode() const;
    bool countryCodeIsSet() const;
    void unsetCountryCode();
    void setCountryCode(utility::string_t value);
    /// <summary>
    /// User-friendly long name of the country for the phone number
    /// </summary>
    utility::string_t getCountryName() const;
    bool countryNameIsSet() const;
    void unsetCountryName();
    void setCountryName(utility::string_t value);

protected:
    bool m_IsValid;
    bool m_IsValidIsSet;
    bool m_Successful;
    bool m_SuccessfulIsSet;
    utility::string_t m_PhoneNumberType;
    bool m_PhoneNumberTypeIsSet;
    utility::string_t m_E164Format;
    bool m_E164FormatIsSet;
    utility::string_t m_InternationalFormat;
    bool m_InternationalFormatIsSet;
    utility::string_t m_NationalFormat;
    bool m_NationalFormatIsSet;
    utility::string_t m_CountryCode;
    bool m_CountryCodeIsSet;
    utility::string_t m_CountryName;
    bool m_CountryNameIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_PhoneNumberValidationResponse_H_ */
