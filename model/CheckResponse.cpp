/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CheckResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CheckResponse::CheckResponse()
{
    m_ValidDomain = false;
    m_ValidDomainIsSet = false;
}

CheckResponse::~CheckResponse()
{
}

void CheckResponse::validate()
{
    // TODO: implement validation
}

web::json::value CheckResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ValidDomainIsSet)
    {
        val[utility::conversions::to_string_t("ValidDomain")] = ModelBase::toJson(m_ValidDomain);
    }

    return val;
}

void CheckResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ValidDomain")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ValidDomain")];
        if(!fieldValue.is_null())
        {
            setValidDomain(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void CheckResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ValidDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ValidDomain"), m_ValidDomain));
    }
}

void CheckResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ValidDomain")))
    {
        setValidDomain(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ValidDomain"))));
    }
}

bool CheckResponse::isValidDomain() const
{
    return m_ValidDomain;
}


void CheckResponse::setValidDomain(bool value)
{
    m_ValidDomain = value;
    m_ValidDomainIsSet = true;
}
bool CheckResponse::validDomainIsSet() const
{
    return m_ValidDomainIsSet;
}

void CheckResponse::unsetValidDomain()
{
    m_ValidDomainIsSet = false;
}

}
}
}
}

