/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ValidateStateResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ValidateStateResponse::ValidateStateResponse()
{
    m_ValidState = false;
    m_ValidStateIsSet = false;
    m_StateOrProvince = utility::conversions::to_string_t("");
    m_StateOrProvinceIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

ValidateStateResponse::~ValidateStateResponse()
{
}

void ValidateStateResponse::validate()
{
    // TODO: implement validation
}

web::json::value ValidateStateResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ValidStateIsSet)
    {
        val[utility::conversions::to_string_t("ValidState")] = ModelBase::toJson(m_ValidState);
    }
    if(m_StateOrProvinceIsSet)
    {
        val[utility::conversions::to_string_t("StateOrProvince")] = ModelBase::toJson(m_StateOrProvince);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("Latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("Longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void ValidateStateResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ValidState")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ValidState")];
        if(!fieldValue.is_null())
        {
            setValidState(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("StateOrProvince")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("StateOrProvince")];
        if(!fieldValue.is_null())
        {
            setStateOrProvince(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void ValidateStateResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ValidStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ValidState"), m_ValidState));
    }
    if(m_StateOrProvinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("StateOrProvince"), m_StateOrProvince));
        
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Longitude"), m_Longitude));
    }
}

void ValidateStateResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ValidState")))
    {
        setValidState(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ValidState"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("StateOrProvince")))
    {
        setStateOrProvince(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("StateOrProvince"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Longitude"))));
    }
}

bool ValidateStateResponse::isValidState() const
{
    return m_ValidState;
}


void ValidateStateResponse::setValidState(bool value)
{
    m_ValidState = value;
    m_ValidStateIsSet = true;
}
bool ValidateStateResponse::validStateIsSet() const
{
    return m_ValidStateIsSet;
}

void ValidateStateResponse::unsetValidState()
{
    m_ValidStateIsSet = false;
}

utility::string_t ValidateStateResponse::getStateOrProvince() const
{
    return m_StateOrProvince;
}


void ValidateStateResponse::setStateOrProvince(utility::string_t value)
{
    m_StateOrProvince = value;
    m_StateOrProvinceIsSet = true;
}
bool ValidateStateResponse::stateOrProvinceIsSet() const
{
    return m_StateOrProvinceIsSet;
}

void ValidateStateResponse::unsetStateOrProvince()
{
    m_StateOrProvinceIsSet = false;
}

double ValidateStateResponse::getLatitude() const
{
    return m_Latitude;
}


void ValidateStateResponse::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool ValidateStateResponse::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void ValidateStateResponse::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

double ValidateStateResponse::getLongitude() const
{
    return m_Longitude;
}


void ValidateStateResponse::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool ValidateStateResponse::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void ValidateStateResponse::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}

