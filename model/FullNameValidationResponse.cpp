/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FullNameValidationResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

FullNameValidationResponse::FullNameValidationResponse()
{
    m_Successful = false;
    m_SuccessfulIsSet = false;
    m_ValidationResult_FirstName = utility::conversions::to_string_t("");
    m_ValidationResult_FirstNameIsSet = false;
    m_ValidationResult_LastName = utility::conversions::to_string_t("");
    m_ValidationResult_LastNameIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_MiddleName = utility::conversions::to_string_t("");
    m_MiddleNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_NickName = utility::conversions::to_string_t("");
    m_NickNameIsSet = false;
    m_Suffix = utility::conversions::to_string_t("");
    m_SuffixIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
}

FullNameValidationResponse::~FullNameValidationResponse()
{
}

void FullNameValidationResponse::validate()
{
    // TODO: implement validation
}

web::json::value FullNameValidationResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t("Successful")] = ModelBase::toJson(m_Successful);
    }
    if(m_ValidationResult_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("ValidationResult_FirstName")] = ModelBase::toJson(m_ValidationResult_FirstName);
    }
    if(m_ValidationResult_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("ValidationResult_LastName")] = ModelBase::toJson(m_ValidationResult_LastName);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("Title")] = ModelBase::toJson(m_Title);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("FirstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_MiddleNameIsSet)
    {
        val[utility::conversions::to_string_t("MiddleName")] = ModelBase::toJson(m_MiddleName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("LastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_NickNameIsSet)
    {
        val[utility::conversions::to_string_t("NickName")] = ModelBase::toJson(m_NickName);
    }
    if(m_SuffixIsSet)
    {
        val[utility::conversions::to_string_t("Suffix")] = ModelBase::toJson(m_Suffix);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("DisplayName")] = ModelBase::toJson(m_DisplayName);
    }

    return val;
}

void FullNameValidationResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Successful")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Successful")];
        if(!fieldValue.is_null())
        {
            setSuccessful(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ValidationResult_FirstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ValidationResult_FirstName")];
        if(!fieldValue.is_null())
        {
            setValidationResultFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ValidationResult_LastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ValidationResult_LastName")];
        if(!fieldValue.is_null())
        {
            setValidationResultLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Title")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Title")];
        if(!fieldValue.is_null())
        {
            setTitle(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("FirstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("FirstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("MiddleName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("MiddleName")];
        if(!fieldValue.is_null())
        {
            setMiddleName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("LastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("LastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("NickName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("NickName")];
        if(!fieldValue.is_null())
        {
            setNickName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Suffix")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Suffix")];
        if(!fieldValue.is_null())
        {
            setSuffix(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("DisplayName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("DisplayName")];
        if(!fieldValue.is_null())
        {
            setDisplayName(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void FullNameValidationResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Successful"), m_Successful));
    }
    if(m_ValidationResult_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ValidationResult_FirstName"), m_ValidationResult_FirstName));
        
    }
    if(m_ValidationResult_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ValidationResult_LastName"), m_ValidationResult_LastName));
        
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Title"), m_Title));
        
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("FirstName"), m_FirstName));
        
    }
    if(m_MiddleNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("MiddleName"), m_MiddleName));
        
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("LastName"), m_LastName));
        
    }
    if(m_NickNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("NickName"), m_NickName));
        
    }
    if(m_SuffixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Suffix"), m_Suffix));
        
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("DisplayName"), m_DisplayName));
        
    }
}

void FullNameValidationResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Successful")))
    {
        setSuccessful(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Successful"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ValidationResult_FirstName")))
    {
        setValidationResultFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ValidationResult_FirstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ValidationResult_LastName")))
    {
        setValidationResultLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ValidationResult_LastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("FirstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("FirstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("MiddleName")))
    {
        setMiddleName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("MiddleName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("LastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("LastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("NickName")))
    {
        setNickName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("NickName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Suffix")))
    {
        setSuffix(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Suffix"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("DisplayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("DisplayName"))));
    }
}

bool FullNameValidationResponse::isSuccessful() const
{
    return m_Successful;
}


void FullNameValidationResponse::setSuccessful(bool value)
{
    m_Successful = value;
    m_SuccessfulIsSet = true;
}
bool FullNameValidationResponse::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void FullNameValidationResponse::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}

utility::string_t FullNameValidationResponse::getValidationResultFirstName() const
{
    return m_ValidationResult_FirstName;
}


void FullNameValidationResponse::setValidationResultFirstName(utility::string_t value)
{
    m_ValidationResult_FirstName = value;
    m_ValidationResult_FirstNameIsSet = true;
}
bool FullNameValidationResponse::validationResultFirstNameIsSet() const
{
    return m_ValidationResult_FirstNameIsSet;
}

void FullNameValidationResponse::unsetValidationResult_FirstName()
{
    m_ValidationResult_FirstNameIsSet = false;
}

utility::string_t FullNameValidationResponse::getValidationResultLastName() const
{
    return m_ValidationResult_LastName;
}


void FullNameValidationResponse::setValidationResultLastName(utility::string_t value)
{
    m_ValidationResult_LastName = value;
    m_ValidationResult_LastNameIsSet = true;
}
bool FullNameValidationResponse::validationResultLastNameIsSet() const
{
    return m_ValidationResult_LastNameIsSet;
}

void FullNameValidationResponse::unsetValidationResult_LastName()
{
    m_ValidationResult_LastNameIsSet = false;
}

utility::string_t FullNameValidationResponse::getTitle() const
{
    return m_Title;
}


void FullNameValidationResponse::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool FullNameValidationResponse::titleIsSet() const
{
    return m_TitleIsSet;
}

void FullNameValidationResponse::unsetTitle()
{
    m_TitleIsSet = false;
}

utility::string_t FullNameValidationResponse::getFirstName() const
{
    return m_FirstName;
}


void FullNameValidationResponse::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool FullNameValidationResponse::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void FullNameValidationResponse::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

utility::string_t FullNameValidationResponse::getMiddleName() const
{
    return m_MiddleName;
}


void FullNameValidationResponse::setMiddleName(utility::string_t value)
{
    m_MiddleName = value;
    m_MiddleNameIsSet = true;
}
bool FullNameValidationResponse::middleNameIsSet() const
{
    return m_MiddleNameIsSet;
}

void FullNameValidationResponse::unsetMiddleName()
{
    m_MiddleNameIsSet = false;
}

utility::string_t FullNameValidationResponse::getLastName() const
{
    return m_LastName;
}


void FullNameValidationResponse::setLastName(utility::string_t value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool FullNameValidationResponse::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void FullNameValidationResponse::unsetLastName()
{
    m_LastNameIsSet = false;
}

utility::string_t FullNameValidationResponse::getNickName() const
{
    return m_NickName;
}


void FullNameValidationResponse::setNickName(utility::string_t value)
{
    m_NickName = value;
    m_NickNameIsSet = true;
}
bool FullNameValidationResponse::nickNameIsSet() const
{
    return m_NickNameIsSet;
}

void FullNameValidationResponse::unsetNickName()
{
    m_NickNameIsSet = false;
}

utility::string_t FullNameValidationResponse::getSuffix() const
{
    return m_Suffix;
}


void FullNameValidationResponse::setSuffix(utility::string_t value)
{
    m_Suffix = value;
    m_SuffixIsSet = true;
}
bool FullNameValidationResponse::suffixIsSet() const
{
    return m_SuffixIsSet;
}

void FullNameValidationResponse::unsetSuffix()
{
    m_SuffixIsSet = false;
}

utility::string_t FullNameValidationResponse::getDisplayName() const
{
    return m_DisplayName;
}


void FullNameValidationResponse::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool FullNameValidationResponse::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void FullNameValidationResponse::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

}
}
}
}

