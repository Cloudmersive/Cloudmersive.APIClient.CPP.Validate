/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PublicHolidayOccurrence.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PublicHolidayOccurrence::PublicHolidayOccurrence()
{
    m_EnglishName = utility::conversions::to_string_t("");
    m_EnglishNameIsSet = false;
    m_LocalName = utility::conversions::to_string_t("");
    m_LocalNameIsSet = false;
    m_OccurrenceDate = utility::datetime();
    m_OccurrenceDateIsSet = false;
    m_HolidayType = utility::conversions::to_string_t("");
    m_HolidayTypeIsSet = false;
    m_Nationwaide = false;
    m_NationwaideIsSet = false;
}

PublicHolidayOccurrence::~PublicHolidayOccurrence()
{
}

void PublicHolidayOccurrence::validate()
{
    // TODO: implement validation
}

web::json::value PublicHolidayOccurrence::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EnglishNameIsSet)
    {
        val[utility::conversions::to_string_t("EnglishName")] = ModelBase::toJson(m_EnglishName);
    }
    if(m_LocalNameIsSet)
    {
        val[utility::conversions::to_string_t("LocalName")] = ModelBase::toJson(m_LocalName);
    }
    if(m_OccurrenceDateIsSet)
    {
        val[utility::conversions::to_string_t("OccurrenceDate")] = ModelBase::toJson(m_OccurrenceDate);
    }
    if(m_HolidayTypeIsSet)
    {
        val[utility::conversions::to_string_t("HolidayType")] = ModelBase::toJson(m_HolidayType);
    }
    if(m_NationwaideIsSet)
    {
        val[utility::conversions::to_string_t("Nationwaide")] = ModelBase::toJson(m_Nationwaide);
    }

    return val;
}

void PublicHolidayOccurrence::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("EnglishName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("EnglishName")];
        if(!fieldValue.is_null())
        {
            setEnglishName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("LocalName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("LocalName")];
        if(!fieldValue.is_null())
        {
            setLocalName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("OccurrenceDate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("OccurrenceDate")];
        if(!fieldValue.is_null())
        {
            setOccurrenceDate(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("HolidayType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("HolidayType")];
        if(!fieldValue.is_null())
        {
            setHolidayType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Nationwaide")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Nationwaide")];
        if(!fieldValue.is_null())
        {
            setNationwaide(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void PublicHolidayOccurrence::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EnglishNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("EnglishName"), m_EnglishName));
        
    }
    if(m_LocalNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("LocalName"), m_LocalName));
        
    }
    if(m_OccurrenceDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("OccurrenceDate"), m_OccurrenceDate));
        
    }
    if(m_HolidayTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("HolidayType"), m_HolidayType));
        
    }
    if(m_NationwaideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Nationwaide"), m_Nationwaide));
    }
}

void PublicHolidayOccurrence::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("EnglishName")))
    {
        setEnglishName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("EnglishName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("LocalName")))
    {
        setLocalName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("LocalName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("OccurrenceDate")))
    {
        setOccurrenceDate(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("OccurrenceDate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("HolidayType")))
    {
        setHolidayType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("HolidayType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Nationwaide")))
    {
        setNationwaide(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Nationwaide"))));
    }
}

utility::string_t PublicHolidayOccurrence::getEnglishName() const
{
    return m_EnglishName;
}


void PublicHolidayOccurrence::setEnglishName(utility::string_t value)
{
    m_EnglishName = value;
    m_EnglishNameIsSet = true;
}
bool PublicHolidayOccurrence::englishNameIsSet() const
{
    return m_EnglishNameIsSet;
}

void PublicHolidayOccurrence::unsetEnglishName()
{
    m_EnglishNameIsSet = false;
}

utility::string_t PublicHolidayOccurrence::getLocalName() const
{
    return m_LocalName;
}


void PublicHolidayOccurrence::setLocalName(utility::string_t value)
{
    m_LocalName = value;
    m_LocalNameIsSet = true;
}
bool PublicHolidayOccurrence::localNameIsSet() const
{
    return m_LocalNameIsSet;
}

void PublicHolidayOccurrence::unsetLocalName()
{
    m_LocalNameIsSet = false;
}

utility::datetime PublicHolidayOccurrence::getOccurrenceDate() const
{
    return m_OccurrenceDate;
}


void PublicHolidayOccurrence::setOccurrenceDate(utility::datetime value)
{
    m_OccurrenceDate = value;
    m_OccurrenceDateIsSet = true;
}
bool PublicHolidayOccurrence::occurrenceDateIsSet() const
{
    return m_OccurrenceDateIsSet;
}

void PublicHolidayOccurrence::unsetOccurrenceDate()
{
    m_OccurrenceDateIsSet = false;
}

utility::string_t PublicHolidayOccurrence::getHolidayType() const
{
    return m_HolidayType;
}


void PublicHolidayOccurrence::setHolidayType(utility::string_t value)
{
    m_HolidayType = value;
    m_HolidayTypeIsSet = true;
}
bool PublicHolidayOccurrence::holidayTypeIsSet() const
{
    return m_HolidayTypeIsSet;
}

void PublicHolidayOccurrence::unsetHolidayType()
{
    m_HolidayTypeIsSet = false;
}

bool PublicHolidayOccurrence::isNationwaide() const
{
    return m_Nationwaide;
}


void PublicHolidayOccurrence::setNationwaide(bool value)
{
    m_Nationwaide = value;
    m_NationwaideIsSet = true;
}
bool PublicHolidayOccurrence::nationwaideIsSet() const
{
    return m_NationwaideIsSet;
}

void PublicHolidayOccurrence::unsetNationwaide()
{
    m_NationwaideIsSet = false;
}

}
}
}
}

