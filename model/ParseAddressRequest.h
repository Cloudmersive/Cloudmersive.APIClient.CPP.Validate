/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ParseAddressRequest.h
 *
 * Request to parse an address formatted as a string/free text into a structured address
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_ParseAddressRequest_H_
#define IO_SWAGGER_CLIENT_MODEL_ParseAddressRequest_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Request to parse an address formatted as a string/free text into a structured address
/// </summary>
class  ParseAddressRequest
    : public ModelBase
{
public:
    ParseAddressRequest();
    virtual ~ParseAddressRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ParseAddressRequest members

    /// <summary>
    /// A mailing address or street address formatted as a single text string; this will be parsed into its components
    /// </summary>
    utility::string_t getAddressString() const;
    bool addressStringIsSet() const;
    void unsetAddressString();
    void setAddressString(utility::string_t value);
    /// <summary>
    /// Optional; indicates how the parsed output should be capitalized; default is Title Case; possible values are: \&quot;Uppercase\&quot; will set the capitalization to UPPER CASE; \&quot;Lowercase\&quot; will set the capitalization to lower case; \&quot;Titlecase\&quot; will set the capitalization to Title Case; and \&quot;Originalcase\&quot; will preserve the original casing as much as possible
    /// </summary>
    utility::string_t getCapitalizationMode() const;
    bool capitalizationModeIsSet() const;
    void unsetCapitalizationMode();
    void setCapitalizationMode(utility::string_t value);

protected:
    utility::string_t m_AddressString;
    bool m_AddressStringIsSet;
    utility::string_t m_CapitalizationMode;
    bool m_CapitalizationModeIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_ParseAddressRequest_H_ */
