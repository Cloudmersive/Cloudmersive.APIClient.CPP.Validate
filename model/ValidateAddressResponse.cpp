/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ValidateAddressResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ValidateAddressResponse::ValidateAddressResponse()
{
    m_ValidAddress = false;
    m_ValidAddressIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

ValidateAddressResponse::~ValidateAddressResponse()
{
}

void ValidateAddressResponse::validate()
{
    // TODO: implement validation
}

web::json::value ValidateAddressResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ValidAddressIsSet)
    {
        val[utility::conversions::to_string_t("ValidAddress")] = ModelBase::toJson(m_ValidAddress);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("Latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("Longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void ValidateAddressResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ValidAddress")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ValidAddress")];
        if(!fieldValue.is_null())
        {
            setValidAddress(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void ValidateAddressResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ValidAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ValidAddress"), m_ValidAddress));
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Longitude"), m_Longitude));
    }
}

void ValidateAddressResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ValidAddress")))
    {
        setValidAddress(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ValidAddress"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Longitude"))));
    }
}

bool ValidateAddressResponse::isValidAddress() const
{
    return m_ValidAddress;
}


void ValidateAddressResponse::setValidAddress(bool value)
{
    m_ValidAddress = value;
    m_ValidAddressIsSet = true;
}
bool ValidateAddressResponse::validAddressIsSet() const
{
    return m_ValidAddressIsSet;
}

void ValidateAddressResponse::unsetValidAddress()
{
    m_ValidAddressIsSet = false;
}

double ValidateAddressResponse::getLatitude() const
{
    return m_Latitude;
}


void ValidateAddressResponse::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool ValidateAddressResponse::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void ValidateAddressResponse::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

double ValidateAddressResponse::getLongitude() const
{
    return m_Longitude;
}


void ValidateAddressResponse::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool ValidateAddressResponse::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void ValidateAddressResponse::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}

