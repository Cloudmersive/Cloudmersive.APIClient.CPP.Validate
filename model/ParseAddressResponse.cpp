/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ParseAddressResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ParseAddressResponse::ParseAddressResponse()
{
    m_Successful = false;
    m_SuccessfulIsSet = false;
    m_Building = utility::conversions::to_string_t("");
    m_BuildingIsSet = false;
    m_StreetNumber = utility::conversions::to_string_t("");
    m_StreetNumberIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_StateOrProvince = utility::conversions::to_string_t("");
    m_StateOrProvinceIsSet = false;
    m_PostalCode = utility::conversions::to_string_t("");
    m_PostalCodeIsSet = false;
    m_CountryFullName = utility::conversions::to_string_t("");
    m_CountryFullNameIsSet = false;
    m_ISOTwoLetterCode = utility::conversions::to_string_t("");
    m_ISOTwoLetterCodeIsSet = false;
}

ParseAddressResponse::~ParseAddressResponse()
{
}

void ParseAddressResponse::validate()
{
    // TODO: implement validation
}

web::json::value ParseAddressResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t("Successful")] = ModelBase::toJson(m_Successful);
    }
    if(m_BuildingIsSet)
    {
        val[utility::conversions::to_string_t("Building")] = ModelBase::toJson(m_Building);
    }
    if(m_StreetNumberIsSet)
    {
        val[utility::conversions::to_string_t("StreetNumber")] = ModelBase::toJson(m_StreetNumber);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t("Street")] = ModelBase::toJson(m_Street);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("City")] = ModelBase::toJson(m_City);
    }
    if(m_StateOrProvinceIsSet)
    {
        val[utility::conversions::to_string_t("StateOrProvince")] = ModelBase::toJson(m_StateOrProvince);
    }
    if(m_PostalCodeIsSet)
    {
        val[utility::conversions::to_string_t("PostalCode")] = ModelBase::toJson(m_PostalCode);
    }
    if(m_CountryFullNameIsSet)
    {
        val[utility::conversions::to_string_t("CountryFullName")] = ModelBase::toJson(m_CountryFullName);
    }
    if(m_ISOTwoLetterCodeIsSet)
    {
        val[utility::conversions::to_string_t("ISOTwoLetterCode")] = ModelBase::toJson(m_ISOTwoLetterCode);
    }

    return val;
}

void ParseAddressResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Successful")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Successful")];
        if(!fieldValue.is_null())
        {
            setSuccessful(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Building")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Building")];
        if(!fieldValue.is_null())
        {
            setBuilding(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("StreetNumber")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("StreetNumber")];
        if(!fieldValue.is_null())
        {
            setStreetNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Street")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Street")];
        if(!fieldValue.is_null())
        {
            setStreet(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("City")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("City")];
        if(!fieldValue.is_null())
        {
            setCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("StateOrProvince")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("StateOrProvince")];
        if(!fieldValue.is_null())
        {
            setStateOrProvince(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("PostalCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("PostalCode")];
        if(!fieldValue.is_null())
        {
            setPostalCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CountryFullName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryFullName")];
        if(!fieldValue.is_null())
        {
            setCountryFullName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ISOTwoLetterCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ISOTwoLetterCode")];
        if(!fieldValue.is_null())
        {
            setISOTwoLetterCode(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void ParseAddressResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Successful"), m_Successful));
    }
    if(m_BuildingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Building"), m_Building));
        
    }
    if(m_StreetNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("StreetNumber"), m_StreetNumber));
        
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Street"), m_Street));
        
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("City"), m_City));
        
    }
    if(m_StateOrProvinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("StateOrProvince"), m_StateOrProvince));
        
    }
    if(m_PostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("PostalCode"), m_PostalCode));
        
    }
    if(m_CountryFullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryFullName"), m_CountryFullName));
        
    }
    if(m_ISOTwoLetterCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ISOTwoLetterCode"), m_ISOTwoLetterCode));
        
    }
}

void ParseAddressResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Successful")))
    {
        setSuccessful(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Successful"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Building")))
    {
        setBuilding(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Building"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("StreetNumber")))
    {
        setStreetNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("StreetNumber"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Street")))
    {
        setStreet(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Street"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("City")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("City"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("StateOrProvince")))
    {
        setStateOrProvince(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("StateOrProvince"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("PostalCode")))
    {
        setPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("PostalCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CountryFullName")))
    {
        setCountryFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryFullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ISOTwoLetterCode")))
    {
        setISOTwoLetterCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ISOTwoLetterCode"))));
    }
}

bool ParseAddressResponse::isSuccessful() const
{
    return m_Successful;
}


void ParseAddressResponse::setSuccessful(bool value)
{
    m_Successful = value;
    m_SuccessfulIsSet = true;
}
bool ParseAddressResponse::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void ParseAddressResponse::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}

utility::string_t ParseAddressResponse::getBuilding() const
{
    return m_Building;
}


void ParseAddressResponse::setBuilding(utility::string_t value)
{
    m_Building = value;
    m_BuildingIsSet = true;
}
bool ParseAddressResponse::buildingIsSet() const
{
    return m_BuildingIsSet;
}

void ParseAddressResponse::unsetBuilding()
{
    m_BuildingIsSet = false;
}

utility::string_t ParseAddressResponse::getStreetNumber() const
{
    return m_StreetNumber;
}


void ParseAddressResponse::setStreetNumber(utility::string_t value)
{
    m_StreetNumber = value;
    m_StreetNumberIsSet = true;
}
bool ParseAddressResponse::streetNumberIsSet() const
{
    return m_StreetNumberIsSet;
}

void ParseAddressResponse::unsetStreetNumber()
{
    m_StreetNumberIsSet = false;
}

utility::string_t ParseAddressResponse::getStreet() const
{
    return m_Street;
}


void ParseAddressResponse::setStreet(utility::string_t value)
{
    m_Street = value;
    m_StreetIsSet = true;
}
bool ParseAddressResponse::streetIsSet() const
{
    return m_StreetIsSet;
}

void ParseAddressResponse::unsetStreet()
{
    m_StreetIsSet = false;
}

utility::string_t ParseAddressResponse::getCity() const
{
    return m_City;
}


void ParseAddressResponse::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool ParseAddressResponse::cityIsSet() const
{
    return m_CityIsSet;
}

void ParseAddressResponse::unsetCity()
{
    m_CityIsSet = false;
}

utility::string_t ParseAddressResponse::getStateOrProvince() const
{
    return m_StateOrProvince;
}


void ParseAddressResponse::setStateOrProvince(utility::string_t value)
{
    m_StateOrProvince = value;
    m_StateOrProvinceIsSet = true;
}
bool ParseAddressResponse::stateOrProvinceIsSet() const
{
    return m_StateOrProvinceIsSet;
}

void ParseAddressResponse::unsetStateOrProvince()
{
    m_StateOrProvinceIsSet = false;
}

utility::string_t ParseAddressResponse::getPostalCode() const
{
    return m_PostalCode;
}


void ParseAddressResponse::setPostalCode(utility::string_t value)
{
    m_PostalCode = value;
    m_PostalCodeIsSet = true;
}
bool ParseAddressResponse::postalCodeIsSet() const
{
    return m_PostalCodeIsSet;
}

void ParseAddressResponse::unsetPostalCode()
{
    m_PostalCodeIsSet = false;
}

utility::string_t ParseAddressResponse::getCountryFullName() const
{
    return m_CountryFullName;
}


void ParseAddressResponse::setCountryFullName(utility::string_t value)
{
    m_CountryFullName = value;
    m_CountryFullNameIsSet = true;
}
bool ParseAddressResponse::countryFullNameIsSet() const
{
    return m_CountryFullNameIsSet;
}

void ParseAddressResponse::unsetCountryFullName()
{
    m_CountryFullNameIsSet = false;
}

utility::string_t ParseAddressResponse::getISOTwoLetterCode() const
{
    return m_ISOTwoLetterCode;
}


void ParseAddressResponse::setISOTwoLetterCode(utility::string_t value)
{
    m_ISOTwoLetterCode = value;
    m_ISOTwoLetterCodeIsSet = true;
}
bool ParseAddressResponse::iSOTwoLetterCodeIsSet() const
{
    return m_ISOTwoLetterCodeIsSet;
}

void ParseAddressResponse::unsetISOTwoLetterCode()
{
    m_ISOTwoLetterCodeIsSet = false;
}

}
}
}
}

