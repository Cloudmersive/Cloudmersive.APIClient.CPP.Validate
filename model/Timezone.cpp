/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Timezone.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Timezone::Timezone()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_BaseUTCOffset = utility::conversions::to_string_t("");
    m_BaseUTCOffsetIsSet = false;
    m_Now = utility::datetime();
    m_NowIsSet = false;
}

Timezone::~Timezone()
{
}

void Timezone::validate()
{
    // TODO: implement validation
}

web::json::value Timezone::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("Name")] = ModelBase::toJson(m_Name);
    }
    if(m_BaseUTCOffsetIsSet)
    {
        val[utility::conversions::to_string_t("BaseUTCOffset")] = ModelBase::toJson(m_BaseUTCOffset);
    }
    if(m_NowIsSet)
    {
        val[utility::conversions::to_string_t("Now")] = ModelBase::toJson(m_Now);
    }

    return val;
}

void Timezone::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BaseUTCOffset")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BaseUTCOffset")];
        if(!fieldValue.is_null())
        {
            setBaseUTCOffset(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Now")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Now")];
        if(!fieldValue.is_null())
        {
            setNow(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void Timezone::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Name"), m_Name));
        
    }
    if(m_BaseUTCOffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BaseUTCOffset"), m_BaseUTCOffset));
        
    }
    if(m_NowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Now"), m_Now));
        
    }
}

void Timezone::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BaseUTCOffset")))
    {
        setBaseUTCOffset(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BaseUTCOffset"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Now")))
    {
        setNow(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Now"))));
    }
}

utility::string_t Timezone::getName() const
{
    return m_Name;
}


void Timezone::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Timezone::nameIsSet() const
{
    return m_NameIsSet;
}

void Timezone::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Timezone::getBaseUTCOffset() const
{
    return m_BaseUTCOffset;
}


void Timezone::setBaseUTCOffset(utility::string_t value)
{
    m_BaseUTCOffset = value;
    m_BaseUTCOffsetIsSet = true;
}
bool Timezone::baseUTCOffsetIsSet() const
{
    return m_BaseUTCOffsetIsSet;
}

void Timezone::unsetBaseUTCOffset()
{
    m_BaseUTCOffsetIsSet = false;
}

utility::datetime Timezone::getNow() const
{
    return m_Now;
}


void Timezone::setNow(utility::datetime value)
{
    m_Now = value;
    m_NowIsSet = true;
}
bool Timezone::nowIsSet() const
{
    return m_NowIsSet;
}

void Timezone::unsetNow()
{
    m_NowIsSet = false;
}

}
}
}
}

