/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "WhoisResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

WhoisResponse::WhoisResponse()
{
    m_ValidDomain = false;
    m_ValidDomainIsSet = false;
    m_RegistrantName = utility::conversions::to_string_t("");
    m_RegistrantNameIsSet = false;
    m_RegistrantOrganization = utility::conversions::to_string_t("");
    m_RegistrantOrganizationIsSet = false;
    m_RegistrantEmail = utility::conversions::to_string_t("");
    m_RegistrantEmailIsSet = false;
    m_RegistrantStreetNumber = utility::conversions::to_string_t("");
    m_RegistrantStreetNumberIsSet = false;
    m_RegistrantStreet = utility::conversions::to_string_t("");
    m_RegistrantStreetIsSet = false;
    m_RegistrantCity = utility::conversions::to_string_t("");
    m_RegistrantCityIsSet = false;
    m_RegistrantStateOrProvince = utility::conversions::to_string_t("");
    m_RegistrantStateOrProvinceIsSet = false;
    m_RegistrantPostalCode = utility::conversions::to_string_t("");
    m_RegistrantPostalCodeIsSet = false;
    m_RegistrantCountry = utility::conversions::to_string_t("");
    m_RegistrantCountryIsSet = false;
    m_RegistrantRawAddress = utility::conversions::to_string_t("");
    m_RegistrantRawAddressIsSet = false;
    m_RegistrantTelephone = utility::conversions::to_string_t("");
    m_RegistrantTelephoneIsSet = false;
    m_WhoisServer = utility::conversions::to_string_t("");
    m_WhoisServerIsSet = false;
    m_RawTextRecord = utility::conversions::to_string_t("");
    m_RawTextRecordIsSet = false;
    m_CreatedDt = utility::datetime();
    m_CreatedDtIsSet = false;
}

WhoisResponse::~WhoisResponse()
{
}

void WhoisResponse::validate()
{
    // TODO: implement validation
}

web::json::value WhoisResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ValidDomainIsSet)
    {
        val[utility::conversions::to_string_t("ValidDomain")] = ModelBase::toJson(m_ValidDomain);
    }
    if(m_RegistrantNameIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantName")] = ModelBase::toJson(m_RegistrantName);
    }
    if(m_RegistrantOrganizationIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantOrganization")] = ModelBase::toJson(m_RegistrantOrganization);
    }
    if(m_RegistrantEmailIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantEmail")] = ModelBase::toJson(m_RegistrantEmail);
    }
    if(m_RegistrantStreetNumberIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantStreetNumber")] = ModelBase::toJson(m_RegistrantStreetNumber);
    }
    if(m_RegistrantStreetIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantStreet")] = ModelBase::toJson(m_RegistrantStreet);
    }
    if(m_RegistrantCityIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantCity")] = ModelBase::toJson(m_RegistrantCity);
    }
    if(m_RegistrantStateOrProvinceIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantStateOrProvince")] = ModelBase::toJson(m_RegistrantStateOrProvince);
    }
    if(m_RegistrantPostalCodeIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantPostalCode")] = ModelBase::toJson(m_RegistrantPostalCode);
    }
    if(m_RegistrantCountryIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantCountry")] = ModelBase::toJson(m_RegistrantCountry);
    }
    if(m_RegistrantRawAddressIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantRawAddress")] = ModelBase::toJson(m_RegistrantRawAddress);
    }
    if(m_RegistrantTelephoneIsSet)
    {
        val[utility::conversions::to_string_t("RegistrantTelephone")] = ModelBase::toJson(m_RegistrantTelephone);
    }
    if(m_WhoisServerIsSet)
    {
        val[utility::conversions::to_string_t("WhoisServer")] = ModelBase::toJson(m_WhoisServer);
    }
    if(m_RawTextRecordIsSet)
    {
        val[utility::conversions::to_string_t("RawTextRecord")] = ModelBase::toJson(m_RawTextRecord);
    }
    if(m_CreatedDtIsSet)
    {
        val[utility::conversions::to_string_t("CreatedDt")] = ModelBase::toJson(m_CreatedDt);
    }

    return val;
}

void WhoisResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ValidDomain")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ValidDomain")];
        if(!fieldValue.is_null())
        {
            setValidDomain(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantName")];
        if(!fieldValue.is_null())
        {
            setRegistrantName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantOrganization")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantOrganization")];
        if(!fieldValue.is_null())
        {
            setRegistrantOrganization(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantEmail")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantEmail")];
        if(!fieldValue.is_null())
        {
            setRegistrantEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantStreetNumber")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantStreetNumber")];
        if(!fieldValue.is_null())
        {
            setRegistrantStreetNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantStreet")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantStreet")];
        if(!fieldValue.is_null())
        {
            setRegistrantStreet(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantCity")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantCity")];
        if(!fieldValue.is_null())
        {
            setRegistrantCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantStateOrProvince")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantStateOrProvince")];
        if(!fieldValue.is_null())
        {
            setRegistrantStateOrProvince(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantPostalCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantPostalCode")];
        if(!fieldValue.is_null())
        {
            setRegistrantPostalCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantCountry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantCountry")];
        if(!fieldValue.is_null())
        {
            setRegistrantCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantRawAddress")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantRawAddress")];
        if(!fieldValue.is_null())
        {
            setRegistrantRawAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegistrantTelephone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegistrantTelephone")];
        if(!fieldValue.is_null())
        {
            setRegistrantTelephone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("WhoisServer")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("WhoisServer")];
        if(!fieldValue.is_null())
        {
            setWhoisServer(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RawTextRecord")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RawTextRecord")];
        if(!fieldValue.is_null())
        {
            setRawTextRecord(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CreatedDt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CreatedDt")];
        if(!fieldValue.is_null())
        {
            setCreatedDt(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void WhoisResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ValidDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ValidDomain"), m_ValidDomain));
    }
    if(m_RegistrantNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantName"), m_RegistrantName));
        
    }
    if(m_RegistrantOrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantOrganization"), m_RegistrantOrganization));
        
    }
    if(m_RegistrantEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantEmail"), m_RegistrantEmail));
        
    }
    if(m_RegistrantStreetNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantStreetNumber"), m_RegistrantStreetNumber));
        
    }
    if(m_RegistrantStreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantStreet"), m_RegistrantStreet));
        
    }
    if(m_RegistrantCityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantCity"), m_RegistrantCity));
        
    }
    if(m_RegistrantStateOrProvinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantStateOrProvince"), m_RegistrantStateOrProvince));
        
    }
    if(m_RegistrantPostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantPostalCode"), m_RegistrantPostalCode));
        
    }
    if(m_RegistrantCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantCountry"), m_RegistrantCountry));
        
    }
    if(m_RegistrantRawAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantRawAddress"), m_RegistrantRawAddress));
        
    }
    if(m_RegistrantTelephoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegistrantTelephone"), m_RegistrantTelephone));
        
    }
    if(m_WhoisServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("WhoisServer"), m_WhoisServer));
        
    }
    if(m_RawTextRecordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RawTextRecord"), m_RawTextRecord));
        
    }
    if(m_CreatedDtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CreatedDt"), m_CreatedDt));
        
    }
}

void WhoisResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ValidDomain")))
    {
        setValidDomain(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ValidDomain"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantName")))
    {
        setRegistrantName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantOrganization")))
    {
        setRegistrantOrganization(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantOrganization"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantEmail")))
    {
        setRegistrantEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantEmail"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantStreetNumber")))
    {
        setRegistrantStreetNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantStreetNumber"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantStreet")))
    {
        setRegistrantStreet(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantStreet"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantCity")))
    {
        setRegistrantCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantCity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantStateOrProvince")))
    {
        setRegistrantStateOrProvince(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantStateOrProvince"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantPostalCode")))
    {
        setRegistrantPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantPostalCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantCountry")))
    {
        setRegistrantCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantCountry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantRawAddress")))
    {
        setRegistrantRawAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantRawAddress"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegistrantTelephone")))
    {
        setRegistrantTelephone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegistrantTelephone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("WhoisServer")))
    {
        setWhoisServer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("WhoisServer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RawTextRecord")))
    {
        setRawTextRecord(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RawTextRecord"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CreatedDt")))
    {
        setCreatedDt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CreatedDt"))));
    }
}

bool WhoisResponse::isValidDomain() const
{
    return m_ValidDomain;
}


void WhoisResponse::setValidDomain(bool value)
{
    m_ValidDomain = value;
    m_ValidDomainIsSet = true;
}
bool WhoisResponse::validDomainIsSet() const
{
    return m_ValidDomainIsSet;
}

void WhoisResponse::unsetValidDomain()
{
    m_ValidDomainIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantName() const
{
    return m_RegistrantName;
}


void WhoisResponse::setRegistrantName(utility::string_t value)
{
    m_RegistrantName = value;
    m_RegistrantNameIsSet = true;
}
bool WhoisResponse::registrantNameIsSet() const
{
    return m_RegistrantNameIsSet;
}

void WhoisResponse::unsetRegistrantName()
{
    m_RegistrantNameIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantOrganization() const
{
    return m_RegistrantOrganization;
}


void WhoisResponse::setRegistrantOrganization(utility::string_t value)
{
    m_RegistrantOrganization = value;
    m_RegistrantOrganizationIsSet = true;
}
bool WhoisResponse::registrantOrganizationIsSet() const
{
    return m_RegistrantOrganizationIsSet;
}

void WhoisResponse::unsetRegistrantOrganization()
{
    m_RegistrantOrganizationIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantEmail() const
{
    return m_RegistrantEmail;
}


void WhoisResponse::setRegistrantEmail(utility::string_t value)
{
    m_RegistrantEmail = value;
    m_RegistrantEmailIsSet = true;
}
bool WhoisResponse::registrantEmailIsSet() const
{
    return m_RegistrantEmailIsSet;
}

void WhoisResponse::unsetRegistrantEmail()
{
    m_RegistrantEmailIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantStreetNumber() const
{
    return m_RegistrantStreetNumber;
}


void WhoisResponse::setRegistrantStreetNumber(utility::string_t value)
{
    m_RegistrantStreetNumber = value;
    m_RegistrantStreetNumberIsSet = true;
}
bool WhoisResponse::registrantStreetNumberIsSet() const
{
    return m_RegistrantStreetNumberIsSet;
}

void WhoisResponse::unsetRegistrantStreetNumber()
{
    m_RegistrantStreetNumberIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantStreet() const
{
    return m_RegistrantStreet;
}


void WhoisResponse::setRegistrantStreet(utility::string_t value)
{
    m_RegistrantStreet = value;
    m_RegistrantStreetIsSet = true;
}
bool WhoisResponse::registrantStreetIsSet() const
{
    return m_RegistrantStreetIsSet;
}

void WhoisResponse::unsetRegistrantStreet()
{
    m_RegistrantStreetIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantCity() const
{
    return m_RegistrantCity;
}


void WhoisResponse::setRegistrantCity(utility::string_t value)
{
    m_RegistrantCity = value;
    m_RegistrantCityIsSet = true;
}
bool WhoisResponse::registrantCityIsSet() const
{
    return m_RegistrantCityIsSet;
}

void WhoisResponse::unsetRegistrantCity()
{
    m_RegistrantCityIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantStateOrProvince() const
{
    return m_RegistrantStateOrProvince;
}


void WhoisResponse::setRegistrantStateOrProvince(utility::string_t value)
{
    m_RegistrantStateOrProvince = value;
    m_RegistrantStateOrProvinceIsSet = true;
}
bool WhoisResponse::registrantStateOrProvinceIsSet() const
{
    return m_RegistrantStateOrProvinceIsSet;
}

void WhoisResponse::unsetRegistrantStateOrProvince()
{
    m_RegistrantStateOrProvinceIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantPostalCode() const
{
    return m_RegistrantPostalCode;
}


void WhoisResponse::setRegistrantPostalCode(utility::string_t value)
{
    m_RegistrantPostalCode = value;
    m_RegistrantPostalCodeIsSet = true;
}
bool WhoisResponse::registrantPostalCodeIsSet() const
{
    return m_RegistrantPostalCodeIsSet;
}

void WhoisResponse::unsetRegistrantPostalCode()
{
    m_RegistrantPostalCodeIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantCountry() const
{
    return m_RegistrantCountry;
}


void WhoisResponse::setRegistrantCountry(utility::string_t value)
{
    m_RegistrantCountry = value;
    m_RegistrantCountryIsSet = true;
}
bool WhoisResponse::registrantCountryIsSet() const
{
    return m_RegistrantCountryIsSet;
}

void WhoisResponse::unsetRegistrantCountry()
{
    m_RegistrantCountryIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantRawAddress() const
{
    return m_RegistrantRawAddress;
}


void WhoisResponse::setRegistrantRawAddress(utility::string_t value)
{
    m_RegistrantRawAddress = value;
    m_RegistrantRawAddressIsSet = true;
}
bool WhoisResponse::registrantRawAddressIsSet() const
{
    return m_RegistrantRawAddressIsSet;
}

void WhoisResponse::unsetRegistrantRawAddress()
{
    m_RegistrantRawAddressIsSet = false;
}

utility::string_t WhoisResponse::getRegistrantTelephone() const
{
    return m_RegistrantTelephone;
}


void WhoisResponse::setRegistrantTelephone(utility::string_t value)
{
    m_RegistrantTelephone = value;
    m_RegistrantTelephoneIsSet = true;
}
bool WhoisResponse::registrantTelephoneIsSet() const
{
    return m_RegistrantTelephoneIsSet;
}

void WhoisResponse::unsetRegistrantTelephone()
{
    m_RegistrantTelephoneIsSet = false;
}

utility::string_t WhoisResponse::getWhoisServer() const
{
    return m_WhoisServer;
}


void WhoisResponse::setWhoisServer(utility::string_t value)
{
    m_WhoisServer = value;
    m_WhoisServerIsSet = true;
}
bool WhoisResponse::whoisServerIsSet() const
{
    return m_WhoisServerIsSet;
}

void WhoisResponse::unsetWhoisServer()
{
    m_WhoisServerIsSet = false;
}

utility::string_t WhoisResponse::getRawTextRecord() const
{
    return m_RawTextRecord;
}


void WhoisResponse::setRawTextRecord(utility::string_t value)
{
    m_RawTextRecord = value;
    m_RawTextRecordIsSet = true;
}
bool WhoisResponse::rawTextRecordIsSet() const
{
    return m_RawTextRecordIsSet;
}

void WhoisResponse::unsetRawTextRecord()
{
    m_RawTextRecordIsSet = false;
}

utility::datetime WhoisResponse::getCreatedDt() const
{
    return m_CreatedDt;
}


void WhoisResponse::setCreatedDt(utility::datetime value)
{
    m_CreatedDt = value;
    m_CreatedDtIsSet = true;
}
bool WhoisResponse::createdDtIsSet() const
{
    return m_CreatedDtIsSet;
}

void WhoisResponse::unsetCreatedDt()
{
    m_CreatedDtIsSet = false;
}

}
}
}
}

