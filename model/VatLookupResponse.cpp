/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VatLookupResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

VatLookupResponse::VatLookupResponse()
{
    m_CountryCode = utility::conversions::to_string_t("");
    m_CountryCodeIsSet = false;
    m_VatNumber = utility::conversions::to_string_t("");
    m_VatNumberIsSet = false;
    m_IsValid = false;
    m_IsValidIsSet = false;
    m_BusinessName = utility::conversions::to_string_t("");
    m_BusinessNameIsSet = false;
    m_BusinessAddress = utility::conversions::to_string_t("");
    m_BusinessAddressIsSet = false;
    m_BusinessBuilding = utility::conversions::to_string_t("");
    m_BusinessBuildingIsSet = false;
    m_BusinessStreetNumber = utility::conversions::to_string_t("");
    m_BusinessStreetNumberIsSet = false;
    m_BusinessStreet = utility::conversions::to_string_t("");
    m_BusinessStreetIsSet = false;
    m_BusinessCity = utility::conversions::to_string_t("");
    m_BusinessCityIsSet = false;
    m_BusinessStateOrProvince = utility::conversions::to_string_t("");
    m_BusinessStateOrProvinceIsSet = false;
    m_BusinessPostalCode = utility::conversions::to_string_t("");
    m_BusinessPostalCodeIsSet = false;
    m_BusinessCountry = utility::conversions::to_string_t("");
    m_BusinessCountryIsSet = false;
}

VatLookupResponse::~VatLookupResponse()
{
}

void VatLookupResponse::validate()
{
    // TODO: implement validation
}

web::json::value VatLookupResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CountryCodeIsSet)
    {
        val[utility::conversions::to_string_t("CountryCode")] = ModelBase::toJson(m_CountryCode);
    }
    if(m_VatNumberIsSet)
    {
        val[utility::conversions::to_string_t("VatNumber")] = ModelBase::toJson(m_VatNumber);
    }
    if(m_IsValidIsSet)
    {
        val[utility::conversions::to_string_t("IsValid")] = ModelBase::toJson(m_IsValid);
    }
    if(m_BusinessNameIsSet)
    {
        val[utility::conversions::to_string_t("BusinessName")] = ModelBase::toJson(m_BusinessName);
    }
    if(m_BusinessAddressIsSet)
    {
        val[utility::conversions::to_string_t("BusinessAddress")] = ModelBase::toJson(m_BusinessAddress);
    }
    if(m_BusinessBuildingIsSet)
    {
        val[utility::conversions::to_string_t("BusinessBuilding")] = ModelBase::toJson(m_BusinessBuilding);
    }
    if(m_BusinessStreetNumberIsSet)
    {
        val[utility::conversions::to_string_t("BusinessStreetNumber")] = ModelBase::toJson(m_BusinessStreetNumber);
    }
    if(m_BusinessStreetIsSet)
    {
        val[utility::conversions::to_string_t("BusinessStreet")] = ModelBase::toJson(m_BusinessStreet);
    }
    if(m_BusinessCityIsSet)
    {
        val[utility::conversions::to_string_t("BusinessCity")] = ModelBase::toJson(m_BusinessCity);
    }
    if(m_BusinessStateOrProvinceIsSet)
    {
        val[utility::conversions::to_string_t("BusinessStateOrProvince")] = ModelBase::toJson(m_BusinessStateOrProvince);
    }
    if(m_BusinessPostalCodeIsSet)
    {
        val[utility::conversions::to_string_t("BusinessPostalCode")] = ModelBase::toJson(m_BusinessPostalCode);
    }
    if(m_BusinessCountryIsSet)
    {
        val[utility::conversions::to_string_t("BusinessCountry")] = ModelBase::toJson(m_BusinessCountry);
    }

    return val;
}

void VatLookupResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("CountryCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryCode")];
        if(!fieldValue.is_null())
        {
            setCountryCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("VatNumber")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("VatNumber")];
        if(!fieldValue.is_null())
        {
            setVatNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("IsValid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("IsValid")];
        if(!fieldValue.is_null())
        {
            setIsValid(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessName")];
        if(!fieldValue.is_null())
        {
            setBusinessName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessAddress")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessAddress")];
        if(!fieldValue.is_null())
        {
            setBusinessAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessBuilding")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessBuilding")];
        if(!fieldValue.is_null())
        {
            setBusinessBuilding(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessStreetNumber")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessStreetNumber")];
        if(!fieldValue.is_null())
        {
            setBusinessStreetNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessStreet")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessStreet")];
        if(!fieldValue.is_null())
        {
            setBusinessStreet(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessCity")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessCity")];
        if(!fieldValue.is_null())
        {
            setBusinessCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessStateOrProvince")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessStateOrProvince")];
        if(!fieldValue.is_null())
        {
            setBusinessStateOrProvince(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessPostalCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessPostalCode")];
        if(!fieldValue.is_null())
        {
            setBusinessPostalCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BusinessCountry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BusinessCountry")];
        if(!fieldValue.is_null())
        {
            setBusinessCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void VatLookupResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryCode"), m_CountryCode));
        
    }
    if(m_VatNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("VatNumber"), m_VatNumber));
        
    }
    if(m_IsValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("IsValid"), m_IsValid));
    }
    if(m_BusinessNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessName"), m_BusinessName));
        
    }
    if(m_BusinessAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessAddress"), m_BusinessAddress));
        
    }
    if(m_BusinessBuildingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessBuilding"), m_BusinessBuilding));
        
    }
    if(m_BusinessStreetNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessStreetNumber"), m_BusinessStreetNumber));
        
    }
    if(m_BusinessStreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessStreet"), m_BusinessStreet));
        
    }
    if(m_BusinessCityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessCity"), m_BusinessCity));
        
    }
    if(m_BusinessStateOrProvinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessStateOrProvince"), m_BusinessStateOrProvince));
        
    }
    if(m_BusinessPostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessPostalCode"), m_BusinessPostalCode));
        
    }
    if(m_BusinessCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BusinessCountry"), m_BusinessCountry));
        
    }
}

void VatLookupResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("CountryCode")))
    {
        setCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("VatNumber")))
    {
        setVatNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("VatNumber"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("IsValid")))
    {
        setIsValid(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("IsValid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessName")))
    {
        setBusinessName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessAddress")))
    {
        setBusinessAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessAddress"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessBuilding")))
    {
        setBusinessBuilding(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessBuilding"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessStreetNumber")))
    {
        setBusinessStreetNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessStreetNumber"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessStreet")))
    {
        setBusinessStreet(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessStreet"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessCity")))
    {
        setBusinessCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessCity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessStateOrProvince")))
    {
        setBusinessStateOrProvince(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessStateOrProvince"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessPostalCode")))
    {
        setBusinessPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessPostalCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BusinessCountry")))
    {
        setBusinessCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BusinessCountry"))));
    }
}

utility::string_t VatLookupResponse::getCountryCode() const
{
    return m_CountryCode;
}


void VatLookupResponse::setCountryCode(utility::string_t value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}
bool VatLookupResponse::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}

void VatLookupResponse::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}

utility::string_t VatLookupResponse::getVatNumber() const
{
    return m_VatNumber;
}


void VatLookupResponse::setVatNumber(utility::string_t value)
{
    m_VatNumber = value;
    m_VatNumberIsSet = true;
}
bool VatLookupResponse::vatNumberIsSet() const
{
    return m_VatNumberIsSet;
}

void VatLookupResponse::unsetVatNumber()
{
    m_VatNumberIsSet = false;
}

bool VatLookupResponse::isIsValid() const
{
    return m_IsValid;
}


void VatLookupResponse::setIsValid(bool value)
{
    m_IsValid = value;
    m_IsValidIsSet = true;
}
bool VatLookupResponse::isValidIsSet() const
{
    return m_IsValidIsSet;
}

void VatLookupResponse::unsetIsValid()
{
    m_IsValidIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessName() const
{
    return m_BusinessName;
}


void VatLookupResponse::setBusinessName(utility::string_t value)
{
    m_BusinessName = value;
    m_BusinessNameIsSet = true;
}
bool VatLookupResponse::businessNameIsSet() const
{
    return m_BusinessNameIsSet;
}

void VatLookupResponse::unsetBusinessName()
{
    m_BusinessNameIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessAddress() const
{
    return m_BusinessAddress;
}


void VatLookupResponse::setBusinessAddress(utility::string_t value)
{
    m_BusinessAddress = value;
    m_BusinessAddressIsSet = true;
}
bool VatLookupResponse::businessAddressIsSet() const
{
    return m_BusinessAddressIsSet;
}

void VatLookupResponse::unsetBusinessAddress()
{
    m_BusinessAddressIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessBuilding() const
{
    return m_BusinessBuilding;
}


void VatLookupResponse::setBusinessBuilding(utility::string_t value)
{
    m_BusinessBuilding = value;
    m_BusinessBuildingIsSet = true;
}
bool VatLookupResponse::businessBuildingIsSet() const
{
    return m_BusinessBuildingIsSet;
}

void VatLookupResponse::unsetBusinessBuilding()
{
    m_BusinessBuildingIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessStreetNumber() const
{
    return m_BusinessStreetNumber;
}


void VatLookupResponse::setBusinessStreetNumber(utility::string_t value)
{
    m_BusinessStreetNumber = value;
    m_BusinessStreetNumberIsSet = true;
}
bool VatLookupResponse::businessStreetNumberIsSet() const
{
    return m_BusinessStreetNumberIsSet;
}

void VatLookupResponse::unsetBusinessStreetNumber()
{
    m_BusinessStreetNumberIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessStreet() const
{
    return m_BusinessStreet;
}


void VatLookupResponse::setBusinessStreet(utility::string_t value)
{
    m_BusinessStreet = value;
    m_BusinessStreetIsSet = true;
}
bool VatLookupResponse::businessStreetIsSet() const
{
    return m_BusinessStreetIsSet;
}

void VatLookupResponse::unsetBusinessStreet()
{
    m_BusinessStreetIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessCity() const
{
    return m_BusinessCity;
}


void VatLookupResponse::setBusinessCity(utility::string_t value)
{
    m_BusinessCity = value;
    m_BusinessCityIsSet = true;
}
bool VatLookupResponse::businessCityIsSet() const
{
    return m_BusinessCityIsSet;
}

void VatLookupResponse::unsetBusinessCity()
{
    m_BusinessCityIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessStateOrProvince() const
{
    return m_BusinessStateOrProvince;
}


void VatLookupResponse::setBusinessStateOrProvince(utility::string_t value)
{
    m_BusinessStateOrProvince = value;
    m_BusinessStateOrProvinceIsSet = true;
}
bool VatLookupResponse::businessStateOrProvinceIsSet() const
{
    return m_BusinessStateOrProvinceIsSet;
}

void VatLookupResponse::unsetBusinessStateOrProvince()
{
    m_BusinessStateOrProvinceIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessPostalCode() const
{
    return m_BusinessPostalCode;
}


void VatLookupResponse::setBusinessPostalCode(utility::string_t value)
{
    m_BusinessPostalCode = value;
    m_BusinessPostalCodeIsSet = true;
}
bool VatLookupResponse::businessPostalCodeIsSet() const
{
    return m_BusinessPostalCodeIsSet;
}

void VatLookupResponse::unsetBusinessPostalCode()
{
    m_BusinessPostalCodeIsSet = false;
}

utility::string_t VatLookupResponse::getBusinessCountry() const
{
    return m_BusinessCountry;
}


void VatLookupResponse::setBusinessCountry(utility::string_t value)
{
    m_BusinessCountry = value;
    m_BusinessCountryIsSet = true;
}
bool VatLookupResponse::businessCountryIsSet() const
{
    return m_BusinessCountryIsSet;
}

void VatLookupResponse::unsetBusinessCountry()
{
    m_BusinessCountryIsSet = false;
}

}
}
}
}

