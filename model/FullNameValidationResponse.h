/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * FullNameValidationResponse.h
 *
 * Result of a full name validation operation
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_FullNameValidationResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_FullNameValidationResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Result of a full name validation operation
/// </summary>
class  FullNameValidationResponse
    : public ModelBase
{
public:
    FullNameValidationResponse();
    virtual ~FullNameValidationResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FullNameValidationResponse members

    /// <summary>
    /// True if the validation operation was successful, false otherwise
    /// </summary>
    bool isSuccessful() const;
    bool successfulIsSet() const;
    void unsetSuccessful();
    void setSuccessful(bool value);
    /// <summary>
    /// Possible values are: ValidFirstName, ValidUnknownFirstName, InvalidSpamInput, InvalidCharacters, InvalidEmpty
    /// </summary>
    utility::string_t getValidationResultFirstName() const;
    bool validationResultFirstNameIsSet() const;
    void unsetValidationResult_FirstName();
    void setValidationResultFirstName(utility::string_t value);
    /// <summary>
    /// Possible values are: ValidLastName, ValidUnknownLastName, InvalidSpamInput, InvalidCharacters, InvalidEmpty
    /// </summary>
    utility::string_t getValidationResultLastName() const;
    bool validationResultLastNameIsSet() const;
    void unsetValidationResult_LastName();
    void setValidationResultLastName(utility::string_t value);
    /// <summary>
    /// The person&#39;s title (if supplied), e.g. \&quot;Mr.\&quot; or \&quot;Ms.\&quot;
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();
    void setTitle(utility::string_t value);
    /// <summary>
    /// The first name (given name)
    /// </summary>
    utility::string_t getFirstName() const;
    bool firstNameIsSet() const;
    void unsetFirstName();
    void setFirstName(utility::string_t value);
    /// <summary>
    /// The middle name(s); if there are multiple names they will be separated by spaces
    /// </summary>
    utility::string_t getMiddleName() const;
    bool middleNameIsSet() const;
    void unsetMiddleName();
    void setMiddleName(utility::string_t value);
    /// <summary>
    /// The last name (surname)
    /// </summary>
    utility::string_t getLastName() const;
    bool lastNameIsSet() const;
    void unsetLastName();
    void setLastName(utility::string_t value);
    /// <summary>
    /// Nickname (if supplied)
    /// </summary>
    utility::string_t getNickName() const;
    bool nickNameIsSet() const;
    void unsetNickName();
    void setNickName(utility::string_t value);
    /// <summary>
    /// Suffix to the name, e.g. \&quot;Jr.\&quot; or \&quot;Sr.\&quot;
    /// </summary>
    utility::string_t getSuffix() const;
    bool suffixIsSet() const;
    void unsetSuffix();
    void setSuffix(utility::string_t value);
    /// <summary>
    /// The full display name of the name
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();
    void setDisplayName(utility::string_t value);

protected:
    bool m_Successful;
    bool m_SuccessfulIsSet;
    utility::string_t m_ValidationResult_FirstName;
    bool m_ValidationResult_FirstNameIsSet;
    utility::string_t m_ValidationResult_LastName;
    bool m_ValidationResult_LastNameIsSet;
    utility::string_t m_Title;
    bool m_TitleIsSet;
    utility::string_t m_FirstName;
    bool m_FirstNameIsSet;
    utility::string_t m_MiddleName;
    bool m_MiddleNameIsSet;
    utility::string_t m_LastName;
    bool m_LastNameIsSet;
    utility::string_t m_NickName;
    bool m_NickNameIsSet;
    utility::string_t m_Suffix;
    bool m_SuffixIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_FullNameValidationResponse_H_ */
