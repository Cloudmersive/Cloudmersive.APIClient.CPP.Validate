/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SqlInjectionDetectionResult.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SqlInjectionDetectionResult::SqlInjectionDetectionResult()
{
    m_Successful = false;
    m_SuccessfulIsSet = false;
    m_ContainedSqlInjectionAttack = false;
    m_ContainedSqlInjectionAttackIsSet = false;
    m_OriginalInput = utility::conversions::to_string_t("");
    m_OriginalInputIsSet = false;
}

SqlInjectionDetectionResult::~SqlInjectionDetectionResult()
{
}

void SqlInjectionDetectionResult::validate()
{
    // TODO: implement validation
}

web::json::value SqlInjectionDetectionResult::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t("Successful")] = ModelBase::toJson(m_Successful);
    }
    if(m_ContainedSqlInjectionAttackIsSet)
    {
        val[utility::conversions::to_string_t("ContainedSqlInjectionAttack")] = ModelBase::toJson(m_ContainedSqlInjectionAttack);
    }
    if(m_OriginalInputIsSet)
    {
        val[utility::conversions::to_string_t("OriginalInput")] = ModelBase::toJson(m_OriginalInput);
    }

    return val;
}

void SqlInjectionDetectionResult::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Successful")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Successful")];
        if(!fieldValue.is_null())
        {
            setSuccessful(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ContainedSqlInjectionAttack")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ContainedSqlInjectionAttack")];
        if(!fieldValue.is_null())
        {
            setContainedSqlInjectionAttack(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("OriginalInput")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("OriginalInput")];
        if(!fieldValue.is_null())
        {
            setOriginalInput(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SqlInjectionDetectionResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Successful"), m_Successful));
    }
    if(m_ContainedSqlInjectionAttackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ContainedSqlInjectionAttack"), m_ContainedSqlInjectionAttack));
    }
    if(m_OriginalInputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("OriginalInput"), m_OriginalInput));
        
    }
}

void SqlInjectionDetectionResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Successful")))
    {
        setSuccessful(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Successful"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ContainedSqlInjectionAttack")))
    {
        setContainedSqlInjectionAttack(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ContainedSqlInjectionAttack"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("OriginalInput")))
    {
        setOriginalInput(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("OriginalInput"))));
    }
}

bool SqlInjectionDetectionResult::isSuccessful() const
{
    return m_Successful;
}


void SqlInjectionDetectionResult::setSuccessful(bool value)
{
    m_Successful = value;
    m_SuccessfulIsSet = true;
}
bool SqlInjectionDetectionResult::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void SqlInjectionDetectionResult::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}

bool SqlInjectionDetectionResult::isContainedSqlInjectionAttack() const
{
    return m_ContainedSqlInjectionAttack;
}


void SqlInjectionDetectionResult::setContainedSqlInjectionAttack(bool value)
{
    m_ContainedSqlInjectionAttack = value;
    m_ContainedSqlInjectionAttackIsSet = true;
}
bool SqlInjectionDetectionResult::containedSqlInjectionAttackIsSet() const
{
    return m_ContainedSqlInjectionAttackIsSet;
}

void SqlInjectionDetectionResult::unsetContainedSqlInjectionAttack()
{
    m_ContainedSqlInjectionAttackIsSet = false;
}

utility::string_t SqlInjectionDetectionResult::getOriginalInput() const
{
    return m_OriginalInput;
}


void SqlInjectionDetectionResult::setOriginalInput(utility::string_t value)
{
    m_OriginalInput = value;
    m_OriginalInputIsSet = true;
}
bool SqlInjectionDetectionResult::originalInputIsSet() const
{
    return m_OriginalInputIsSet;
}

void SqlInjectionDetectionResult::unsetOriginalInput()
{
    m_OriginalInputIsSet = false;
}

}
}
}
}

