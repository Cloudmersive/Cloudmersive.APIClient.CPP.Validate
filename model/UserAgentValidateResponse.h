/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserAgentValidateResponse.h
 *
 * The result of a User-Agent validation request
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_UserAgentValidateResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_UserAgentValidateResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The result of a User-Agent validation request
/// </summary>
class  UserAgentValidateResponse
    : public ModelBase
{
public:
    UserAgentValidateResponse();
    virtual ~UserAgentValidateResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserAgentValidateResponse members

    /// <summary>
    /// True if the operation was successful, false otherwise
    /// </summary>
    bool isSuccessful() const;
    bool successfulIsSet() const;
    void unsetSuccessful();
    void setSuccessful(bool value);
    /// <summary>
    /// True if the request is a known robot, false otherwise
    /// </summary>
    bool isIsBot() const;
    bool isBotIsSet() const;
    void unsetIsBot();
    void setIsBot(bool value);
    /// <summary>
    /// Optional; name of the robot if the request was from a known robot, otherwise null
    /// </summary>
    utility::string_t getBotName() const;
    bool botNameIsSet() const;
    void unsetBotName();
    void setBotName(utility::string_t value);
    /// <summary>
    /// Optional; if available, the URL to the robot
    /// </summary>
    utility::string_t getBotURL() const;
    bool botURLIsSet() const;
    void unsetBotURL();
    void setBotURL(utility::string_t value);
    /// <summary>
    /// Operating System of the User-Agent (e.g. Windows)
    /// </summary>
    utility::string_t getOperatingSystem() const;
    bool operatingSystemIsSet() const;
    void unsetOperatingSystem();
    void setOperatingSystem(utility::string_t value);
    /// <summary>
    /// The CPU platform of the User-Agent (e.g. x64)
    /// </summary>
    utility::string_t getOperatingSystemCPUPlatform() const;
    bool operatingSystemCPUPlatformIsSet() const;
    void unsetOperatingSystemCPUPlatform();
    void setOperatingSystemCPUPlatform(utility::string_t value);
    /// <summary>
    /// The version of the operating system of the User-Agent (e.g. \&quot;10\&quot; for Windows 10)
    /// </summary>
    utility::string_t getOperatingSystemVersion() const;
    bool operatingSystemVersionIsSet() const;
    void unsetOperatingSystemVersion();
    void setOperatingSystemVersion(utility::string_t value);
    /// <summary>
    /// Device type of the User-Agent; possible values are \&quot;DESKTOP\&quot;, \&quot;SMARTPHONE\&quot;, \&quot;TABLET\&quot;
    /// </summary>
    utility::string_t getDeviceType() const;
    bool deviceTypeIsSet() const;
    void unsetDeviceType();
    void setDeviceType(utility::string_t value);
    /// <summary>
    /// Brand name of the User-Agent
    /// </summary>
    utility::string_t getDeviceBrandName() const;
    bool deviceBrandNameIsSet() const;
    void unsetDeviceBrandName();
    void setDeviceBrandName(utility::string_t value);
    /// <summary>
    /// Model name or number of the User-Agent
    /// </summary>
    utility::string_t getDeviceModel() const;
    bool deviceModelIsSet() const;
    void unsetDeviceModel();
    void setDeviceModel(utility::string_t value);
    /// <summary>
    /// Name of the Browser
    /// </summary>
    utility::string_t getBrowserName() const;
    bool browserNameIsSet() const;
    void unsetBrowserName();
    void setBrowserName(utility::string_t value);
    /// <summary>
    /// Version of the Browser
    /// </summary>
    utility::string_t getBrowserVersion() const;
    bool browserVersionIsSet() const;
    void unsetBrowserVersion();
    void setBrowserVersion(utility::string_t value);
    /// <summary>
    /// Name of the Browser Engine
    /// </summary>
    utility::string_t getBrowserEngineName() const;
    bool browserEngineNameIsSet() const;
    void unsetBrowserEngineName();
    void setBrowserEngineName(utility::string_t value);
    /// <summary>
    /// Version of the Browser Engine
    /// </summary>
    utility::string_t getBrowserEngineVersion() const;
    bool browserEngineVersionIsSet() const;
    void unsetBrowserEngineVersion();
    void setBrowserEngineVersion(utility::string_t value);

protected:
    bool m_Successful;
    bool m_SuccessfulIsSet;
    bool m_IsBot;
    bool m_IsBotIsSet;
    utility::string_t m_BotName;
    bool m_BotNameIsSet;
    utility::string_t m_BotURL;
    bool m_BotURLIsSet;
    utility::string_t m_OperatingSystem;
    bool m_OperatingSystemIsSet;
    utility::string_t m_OperatingSystemCPUPlatform;
    bool m_OperatingSystemCPUPlatformIsSet;
    utility::string_t m_OperatingSystemVersion;
    bool m_OperatingSystemVersionIsSet;
    utility::string_t m_DeviceType;
    bool m_DeviceTypeIsSet;
    utility::string_t m_DeviceBrandName;
    bool m_DeviceBrandNameIsSet;
    utility::string_t m_DeviceModel;
    bool m_DeviceModelIsSet;
    utility::string_t m_BrowserName;
    bool m_BrowserNameIsSet;
    utility::string_t m_BrowserVersion;
    bool m_BrowserVersionIsSet;
    utility::string_t m_BrowserEngineName;
    bool m_BrowserEngineNameIsSet;
    utility::string_t m_BrowserEngineVersion;
    bool m_BrowserEngineVersionIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_UserAgentValidateResponse_H_ */
