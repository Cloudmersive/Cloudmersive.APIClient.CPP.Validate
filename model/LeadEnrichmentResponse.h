/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LeadEnrichmentResponse.h
 *
 * Result of the lead enrichment process
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_LeadEnrichmentResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_LeadEnrichmentResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Result of the lead enrichment process
/// </summary>
class  LeadEnrichmentResponse
    : public ModelBase
{
public:
    LeadEnrichmentResponse();
    virtual ~LeadEnrichmentResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LeadEnrichmentResponse members

    /// <summary>
    /// True if the operation was successful, false otherwise
    /// </summary>
    bool isSuccessful() const;
    bool successfulIsSet() const;
    void unsetSuccessful();
    void setSuccessful(bool value);
    /// <summary>
    /// The type of the lead; possible types are Junk (a single individual using a disposable/throwaway email address); Individual (a single individual, typically a consumer, not purchasing on behalf of a business); SmallBusiness (a small business, typically with fewer than 100 employees); MediumBusiness (a medium business, larger than 100 employees but fewer than 1000 employees); Enterprise (a large business with greater than 1000 employees); Business (a business customer of unknown size)
    /// </summary>
    utility::string_t getLeadType() const;
    bool leadTypeIsSet() const;
    void unsetLeadType();
    void setLeadType(utility::string_t value);
    /// <summary>
    /// The person&#39;s business email address for the lead
    /// </summary>
    utility::string_t getContactBusinessEmail() const;
    bool contactBusinessEmailIsSet() const;
    void unsetContactBusinessEmail();
    void setContactBusinessEmail(utility::string_t value);
    /// <summary>
    /// The person&#39;s first name for the lead
    /// </summary>
    utility::string_t getContactFirstName() const;
    bool contactFirstNameIsSet() const;
    void unsetContactFirstName();
    void setContactFirstName(utility::string_t value);
    /// <summary>
    /// The person&#39;s last name for the lead
    /// </summary>
    utility::string_t getContactLastName() const;
    bool contactLastNameIsSet() const;
    void unsetContactLastName();
    void setContactLastName(utility::string_t value);
    /// <summary>
    /// Gender for contact name; possible values are Male, Female, and Neutral (can be applied to Male or Female).  Requires ContactFirstName.
    /// </summary>
    utility::string_t getContactGender() const;
    bool contactGenderIsSet() const;
    void unsetContactGender();
    void setContactGender(utility::string_t value);
    /// <summary>
    /// Name of the company for the lead
    /// </summary>
    utility::string_t getCompanyName() const;
    bool companyNameIsSet() const;
    void unsetCompanyName();
    void setCompanyName(utility::string_t value);
    /// <summary>
    /// Domain name / website for the lead
    /// </summary>
    utility::string_t getCompanyDomainName() const;
    bool companyDomainNameIsSet() const;
    void unsetCompanyDomainName();
    void setCompanyDomainName(utility::string_t value);
    /// <summary>
    /// House number of the address of the company for the lead
    /// </summary>
    utility::string_t getCompanyHouseNumber() const;
    bool companyHouseNumberIsSet() const;
    void unsetCompanyHouseNumber();
    void setCompanyHouseNumber(utility::string_t value);
    /// <summary>
    /// Street name of the address of the company for the lead
    /// </summary>
    utility::string_t getCompanyStreet() const;
    bool companyStreetIsSet() const;
    void unsetCompanyStreet();
    void setCompanyStreet(utility::string_t value);
    /// <summary>
    /// City of the address of the company for the lead
    /// </summary>
    utility::string_t getCompanyCity() const;
    bool companyCityIsSet() const;
    void unsetCompanyCity();
    void setCompanyCity(utility::string_t value);
    /// <summary>
    /// State or Province of the address of the company for the lead
    /// </summary>
    utility::string_t getCompanyStateOrProvince() const;
    bool companyStateOrProvinceIsSet() const;
    void unsetCompanyStateOrProvince();
    void setCompanyStateOrProvince(utility::string_t value);
    /// <summary>
    /// Postal Code of the address of the company for the lead
    /// </summary>
    utility::string_t getCompanyPostalCode() const;
    bool companyPostalCodeIsSet() const;
    void unsetCompanyPostalCode();
    void setCompanyPostalCode(utility::string_t value);
    /// <summary>
    /// Country Name of the address of the company for the lead
    /// </summary>
    utility::string_t getCompanyCountry() const;
    bool companyCountryIsSet() const;
    void unsetCompanyCountry();
    void setCompanyCountry(utility::string_t value);
    /// <summary>
    /// Country Code (2-letter ISO 3166-1) of the address of the company for the lead
    /// </summary>
    utility::string_t getCompanyCountryCode() const;
    bool companyCountryCodeIsSet() const;
    void unsetCompanyCountryCode();
    void setCompanyCountryCode(utility::string_t value);
    /// <summary>
    /// Telephone of the company office for the lead
    /// </summary>
    utility::string_t getCompanyTelephone() const;
    bool companyTelephoneIsSet() const;
    void unsetCompanyTelephone();
    void setCompanyTelephone(utility::string_t value);
    /// <summary>
    /// VAT number of the company for the lead
    /// </summary>
    utility::string_t getCompanyVATNumber() const;
    bool companyVATNumberIsSet() const;
    void unsetCompanyVATNumber();
    void setCompanyVATNumber(utility::string_t value);
    /// <summary>
    /// Count of employees at the company (estimated), if available
    /// </summary>
    int32_t getEmployeeCount() const;
    bool employeeCountIsSet() const;
    void unsetEmployeeCount();
    void setEmployeeCount(int32_t value);

protected:
    bool m_Successful;
    bool m_SuccessfulIsSet;
    utility::string_t m_LeadType;
    bool m_LeadTypeIsSet;
    utility::string_t m_ContactBusinessEmail;
    bool m_ContactBusinessEmailIsSet;
    utility::string_t m_ContactFirstName;
    bool m_ContactFirstNameIsSet;
    utility::string_t m_ContactLastName;
    bool m_ContactLastNameIsSet;
    utility::string_t m_ContactGender;
    bool m_ContactGenderIsSet;
    utility::string_t m_CompanyName;
    bool m_CompanyNameIsSet;
    utility::string_t m_CompanyDomainName;
    bool m_CompanyDomainNameIsSet;
    utility::string_t m_CompanyHouseNumber;
    bool m_CompanyHouseNumberIsSet;
    utility::string_t m_CompanyStreet;
    bool m_CompanyStreetIsSet;
    utility::string_t m_CompanyCity;
    bool m_CompanyCityIsSet;
    utility::string_t m_CompanyStateOrProvince;
    bool m_CompanyStateOrProvinceIsSet;
    utility::string_t m_CompanyPostalCode;
    bool m_CompanyPostalCodeIsSet;
    utility::string_t m_CompanyCountry;
    bool m_CompanyCountryIsSet;
    utility::string_t m_CompanyCountryCode;
    bool m_CompanyCountryCodeIsSet;
    utility::string_t m_CompanyTelephone;
    bool m_CompanyTelephoneIsSet;
    utility::string_t m_CompanyVATNumber;
    bool m_CompanyVATNumberIsSet;
    int32_t m_EmployeeCount;
    bool m_EmployeeCountIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_LeadEnrichmentResponse_H_ */
