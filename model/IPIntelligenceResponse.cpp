/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IPIntelligenceResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IPIntelligenceResponse::IPIntelligenceResponse()
{
    m_IsBot = false;
    m_IsBotIsSet = false;
    m_IsTorNode = false;
    m_IsTorNodeIsSet = false;
    m_IsThreat = false;
    m_IsThreatIsSet = false;
    m_IsEU = false;
    m_IsEUIsSet = false;
    m_LocationIsSet = false;
    m_CurrencyCode = utility::conversions::to_string_t("");
    m_CurrencyCodeIsSet = false;
    m_CurrencyName = utility::conversions::to_string_t("");
    m_CurrencyNameIsSet = false;
    m_RegionArea = utility::conversions::to_string_t("");
    m_RegionAreaIsSet = false;
    m_SubregionArea = utility::conversions::to_string_t("");
    m_SubregionAreaIsSet = false;
}

IPIntelligenceResponse::~IPIntelligenceResponse()
{
}

void IPIntelligenceResponse::validate()
{
    // TODO: implement validation
}

web::json::value IPIntelligenceResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IsBotIsSet)
    {
        val[utility::conversions::to_string_t("IsBot")] = ModelBase::toJson(m_IsBot);
    }
    if(m_IsTorNodeIsSet)
    {
        val[utility::conversions::to_string_t("IsTorNode")] = ModelBase::toJson(m_IsTorNode);
    }
    if(m_IsThreatIsSet)
    {
        val[utility::conversions::to_string_t("IsThreat")] = ModelBase::toJson(m_IsThreat);
    }
    if(m_IsEUIsSet)
    {
        val[utility::conversions::to_string_t("IsEU")] = ModelBase::toJson(m_IsEU);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("Location")] = ModelBase::toJson(m_Location);
    }
    if(m_CurrencyCodeIsSet)
    {
        val[utility::conversions::to_string_t("CurrencyCode")] = ModelBase::toJson(m_CurrencyCode);
    }
    if(m_CurrencyNameIsSet)
    {
        val[utility::conversions::to_string_t("CurrencyName")] = ModelBase::toJson(m_CurrencyName);
    }
    if(m_RegionAreaIsSet)
    {
        val[utility::conversions::to_string_t("RegionArea")] = ModelBase::toJson(m_RegionArea);
    }
    if(m_SubregionAreaIsSet)
    {
        val[utility::conversions::to_string_t("SubregionArea")] = ModelBase::toJson(m_SubregionArea);
    }

    return val;
}

void IPIntelligenceResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("IsBot")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("IsBot")];
        if(!fieldValue.is_null())
        {
            setIsBot(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("IsTorNode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("IsTorNode")];
        if(!fieldValue.is_null())
        {
            setIsTorNode(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("IsThreat")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("IsThreat")];
        if(!fieldValue.is_null())
        {
            setIsThreat(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("IsEU")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("IsEU")];
        if(!fieldValue.is_null())
        {
            setIsEU(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Location")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Location")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GeolocateResponse> newItem(new GeolocateResponse());
            newItem->fromJson(fieldValue);
            setLocation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CurrencyCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CurrencyCode")];
        if(!fieldValue.is_null())
        {
            setCurrencyCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CurrencyName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CurrencyName")];
        if(!fieldValue.is_null())
        {
            setCurrencyName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegionArea")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegionArea")];
        if(!fieldValue.is_null())
        {
            setRegionArea(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("SubregionArea")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("SubregionArea")];
        if(!fieldValue.is_null())
        {
            setSubregionArea(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void IPIntelligenceResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IsBotIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("IsBot"), m_IsBot));
    }
    if(m_IsTorNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("IsTorNode"), m_IsTorNode));
    }
    if(m_IsThreatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("IsThreat"), m_IsThreat));
    }
    if(m_IsEUIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("IsEU"), m_IsEU));
    }
    if(m_LocationIsSet)
    {
        if (m_Location.get())
        {
            m_Location->toMultipart(multipart, utility::conversions::to_string_t("Location."));
        }
        
    }
    if(m_CurrencyCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CurrencyCode"), m_CurrencyCode));
        
    }
    if(m_CurrencyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CurrencyName"), m_CurrencyName));
        
    }
    if(m_RegionAreaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegionArea"), m_RegionArea));
        
    }
    if(m_SubregionAreaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("SubregionArea"), m_SubregionArea));
        
    }
}

void IPIntelligenceResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("IsBot")))
    {
        setIsBot(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("IsBot"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("IsTorNode")))
    {
        setIsTorNode(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("IsTorNode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("IsThreat")))
    {
        setIsThreat(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("IsThreat"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("IsEU")))
    {
        setIsEU(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("IsEU"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Location")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("Location")))
        {
            std::shared_ptr<GeolocateResponse> newItem(new GeolocateResponse());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("Location."));
            setLocation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CurrencyCode")))
    {
        setCurrencyCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CurrencyCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CurrencyName")))
    {
        setCurrencyName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CurrencyName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegionArea")))
    {
        setRegionArea(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegionArea"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("SubregionArea")))
    {
        setSubregionArea(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("SubregionArea"))));
    }
}

bool IPIntelligenceResponse::isIsBot() const
{
    return m_IsBot;
}


void IPIntelligenceResponse::setIsBot(bool value)
{
    m_IsBot = value;
    m_IsBotIsSet = true;
}
bool IPIntelligenceResponse::isBotIsSet() const
{
    return m_IsBotIsSet;
}

void IPIntelligenceResponse::unsetIsBot()
{
    m_IsBotIsSet = false;
}

bool IPIntelligenceResponse::isIsTorNode() const
{
    return m_IsTorNode;
}


void IPIntelligenceResponse::setIsTorNode(bool value)
{
    m_IsTorNode = value;
    m_IsTorNodeIsSet = true;
}
bool IPIntelligenceResponse::isTorNodeIsSet() const
{
    return m_IsTorNodeIsSet;
}

void IPIntelligenceResponse::unsetIsTorNode()
{
    m_IsTorNodeIsSet = false;
}

bool IPIntelligenceResponse::isIsThreat() const
{
    return m_IsThreat;
}


void IPIntelligenceResponse::setIsThreat(bool value)
{
    m_IsThreat = value;
    m_IsThreatIsSet = true;
}
bool IPIntelligenceResponse::isThreatIsSet() const
{
    return m_IsThreatIsSet;
}

void IPIntelligenceResponse::unsetIsThreat()
{
    m_IsThreatIsSet = false;
}

bool IPIntelligenceResponse::isIsEU() const
{
    return m_IsEU;
}


void IPIntelligenceResponse::setIsEU(bool value)
{
    m_IsEU = value;
    m_IsEUIsSet = true;
}
bool IPIntelligenceResponse::isEUIsSet() const
{
    return m_IsEUIsSet;
}

void IPIntelligenceResponse::unsetIsEU()
{
    m_IsEUIsSet = false;
}

std::shared_ptr<GeolocateResponse> IPIntelligenceResponse::getLocation() const
{
    return m_Location;
}


void IPIntelligenceResponse::setLocation(std::shared_ptr<GeolocateResponse> value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool IPIntelligenceResponse::locationIsSet() const
{
    return m_LocationIsSet;
}

void IPIntelligenceResponse::unsetLocation()
{
    m_LocationIsSet = false;
}

utility::string_t IPIntelligenceResponse::getCurrencyCode() const
{
    return m_CurrencyCode;
}


void IPIntelligenceResponse::setCurrencyCode(utility::string_t value)
{
    m_CurrencyCode = value;
    m_CurrencyCodeIsSet = true;
}
bool IPIntelligenceResponse::currencyCodeIsSet() const
{
    return m_CurrencyCodeIsSet;
}

void IPIntelligenceResponse::unsetCurrencyCode()
{
    m_CurrencyCodeIsSet = false;
}

utility::string_t IPIntelligenceResponse::getCurrencyName() const
{
    return m_CurrencyName;
}


void IPIntelligenceResponse::setCurrencyName(utility::string_t value)
{
    m_CurrencyName = value;
    m_CurrencyNameIsSet = true;
}
bool IPIntelligenceResponse::currencyNameIsSet() const
{
    return m_CurrencyNameIsSet;
}

void IPIntelligenceResponse::unsetCurrencyName()
{
    m_CurrencyNameIsSet = false;
}

utility::string_t IPIntelligenceResponse::getRegionArea() const
{
    return m_RegionArea;
}


void IPIntelligenceResponse::setRegionArea(utility::string_t value)
{
    m_RegionArea = value;
    m_RegionAreaIsSet = true;
}
bool IPIntelligenceResponse::regionAreaIsSet() const
{
    return m_RegionAreaIsSet;
}

void IPIntelligenceResponse::unsetRegionArea()
{
    m_RegionAreaIsSet = false;
}

utility::string_t IPIntelligenceResponse::getSubregionArea() const
{
    return m_SubregionArea;
}


void IPIntelligenceResponse::setSubregionArea(utility::string_t value)
{
    m_SubregionArea = value;
    m_SubregionAreaIsSet = true;
}
bool IPIntelligenceResponse::subregionAreaIsSet() const
{
    return m_SubregionAreaIsSet;
}

void IPIntelligenceResponse::unsetSubregionArea()
{
    m_SubregionAreaIsSet = false;
}

}
}
}
}

