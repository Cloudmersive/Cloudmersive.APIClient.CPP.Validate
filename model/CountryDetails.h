/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CountryDetails.h
 *
 * Details of one country
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_CountryDetails_H_
#define IO_SWAGGER_CLIENT_MODEL_CountryDetails_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Details of one country
/// </summary>
class  CountryDetails
    : public ModelBase
{
public:
    CountryDetails();
    virtual ~CountryDetails();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CountryDetails members

    /// <summary>
    /// Name of the country
    /// </summary>
    utility::string_t getCountryName() const;
    bool countryNameIsSet() const;
    void unsetCountryName();
    void setCountryName(utility::string_t value);
    /// <summary>
    /// Three-letter ISO 3166-1 country code
    /// </summary>
    utility::string_t getThreeLetterCode() const;
    bool threeLetterCodeIsSet() const;
    void unsetThreeLetterCode();
    void setThreeLetterCode(utility::string_t value);
    /// <summary>
    /// Two-letter ISO 3166-1 country code
    /// </summary>
    utility::string_t getISOTwoLetterCode() const;
    bool iSOTwoLetterCodeIsSet() const;
    void unsetISOTwoLetterCode();
    void setISOTwoLetterCode(utility::string_t value);
    /// <summary>
    /// True if this country is currently a member of the European Union (EU), false otherwise
    /// </summary>
    bool isIsEuropeanUnionMember() const;
    bool isEuropeanUnionMemberIsSet() const;
    void unsetIsEuropeanUnionMember();
    void setIsEuropeanUnionMember(bool value);
    /// <summary>
    /// ISO 4217 currency three-letter code associated with the country
    /// </summary>
    utility::string_t getISOCurrencyCode() const;
    bool iSOCurrencyCodeIsSet() const;
    void unsetISOCurrencyCode();
    void setISOCurrencyCode(utility::string_t value);
    /// <summary>
    /// Symbol associated with the currency
    /// </summary>
    utility::string_t getCurrencySymbol() const;
    bool currencySymbolIsSet() const;
    void unsetCurrencySymbol();
    void setCurrencySymbol(utility::string_t value);
    /// <summary>
    /// Full name of the currency
    /// </summary>
    utility::string_t getCurrencyEnglishName() const;
    bool currencyEnglishNameIsSet() const;
    void unsetCurrencyEnglishName();
    void setCurrencyEnglishName(utility::string_t value);
    /// <summary>
    /// Region (continent) in which the country is located; possible values are None, Europe, Americas, Asia, Africa, Oceania
    /// </summary>
    utility::string_t getRegion() const;
    bool regionIsSet() const;
    void unsetRegion();
    void setRegion(utility::string_t value);
    /// <summary>
    /// Subregion in which the country is located; possible values are None, NorthernEurope, WesternEurope, SouthernEurope, EasternEurope, CentralAmerica, NorthernAmerica, SouthAmerica, EasternAfrica, MiddleAfrica, NorthernAfrica , SouthernAfrica , WesternAfrica , CentralAsia , EasternAsia , SouthernAsia , SouthEasternAsia , WesternAsia , Southern , Middle , AustraliaandNewZealand , Melanesia , Polynesia , Micronesia , Caribbean,
    /// </summary>
    utility::string_t getSubregion() const;
    bool subregionIsSet() const;
    void unsetSubregion();
    void setSubregion(utility::string_t value);

protected:
    utility::string_t m_CountryName;
    bool m_CountryNameIsSet;
    utility::string_t m_ThreeLetterCode;
    bool m_ThreeLetterCodeIsSet;
    utility::string_t m_ISOTwoLetterCode;
    bool m_ISOTwoLetterCodeIsSet;
    bool m_IsEuropeanUnionMember;
    bool m_IsEuropeanUnionMemberIsSet;
    utility::string_t m_ISOCurrencyCode;
    bool m_ISOCurrencyCodeIsSet;
    utility::string_t m_CurrencySymbol;
    bool m_CurrencySymbolIsSet;
    utility::string_t m_CurrencyEnglishName;
    bool m_CurrencyEnglishNameIsSet;
    utility::string_t m_Region;
    bool m_RegionIsSet;
    utility::string_t m_Subregion;
    bool m_SubregionIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_CountryDetails_H_ */
