/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * AddressVerifySyntaxOnlyResponse.h
 *
 * Syntactic validity of email address
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_AddressVerifySyntaxOnlyResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_AddressVerifySyntaxOnlyResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Syntactic validity of email address
/// </summary>
class  AddressVerifySyntaxOnlyResponse
    : public ModelBase
{
public:
    AddressVerifySyntaxOnlyResponse();
    virtual ~AddressVerifySyntaxOnlyResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AddressVerifySyntaxOnlyResponse members

    /// <summary>
    /// True if the email address is syntactically valid, false if it is not
    /// </summary>
    bool isValidAddress() const;
    bool validAddressIsSet() const;
    void unsetValidAddress();
    void setValidAddress(bool value);
    /// <summary>
    /// Domain name of the email address
    /// </summary>
    utility::string_t getDomain() const;
    bool domainIsSet() const;
    void unsetDomain();
    void setDomain(utility::string_t value);
    /// <summary>
    /// True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise.
    /// </summary>
    bool isIsFreeEmailProvider() const;
    bool isFreeEmailProviderIsSet() const;
    void unsetIsFreeEmailProvider();
    void setIsFreeEmailProvider(bool value);
    /// <summary>
    /// True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there.
    /// </summary>
    bool isIsDisposable() const;
    bool isDisposableIsSet() const;
    void unsetIsDisposable();
    void setIsDisposable(bool value);

protected:
    bool m_ValidAddress;
    bool m_ValidAddressIsSet;
    utility::string_t m_Domain;
    bool m_DomainIsSet;
    bool m_IsFreeEmailProvider;
    bool m_IsFreeEmailProviderIsSet;
    bool m_IsDisposable;
    bool m_IsDisposableIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_AddressVerifySyntaxOnlyResponse_H_ */
