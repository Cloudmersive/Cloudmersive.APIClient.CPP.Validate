/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LeadEnrichmentResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LeadEnrichmentResponse::LeadEnrichmentResponse()
{
    m_Successful = false;
    m_SuccessfulIsSet = false;
    m_LeadType = utility::conversions::to_string_t("");
    m_LeadTypeIsSet = false;
    m_ContactBusinessEmail = utility::conversions::to_string_t("");
    m_ContactBusinessEmailIsSet = false;
    m_ContactFirstName = utility::conversions::to_string_t("");
    m_ContactFirstNameIsSet = false;
    m_ContactLastName = utility::conversions::to_string_t("");
    m_ContactLastNameIsSet = false;
    m_ContactGender = utility::conversions::to_string_t("");
    m_ContactGenderIsSet = false;
    m_CompanyName = utility::conversions::to_string_t("");
    m_CompanyNameIsSet = false;
    m_CompanyDomainName = utility::conversions::to_string_t("");
    m_CompanyDomainNameIsSet = false;
    m_CompanyHouseNumber = utility::conversions::to_string_t("");
    m_CompanyHouseNumberIsSet = false;
    m_CompanyStreet = utility::conversions::to_string_t("");
    m_CompanyStreetIsSet = false;
    m_CompanyCity = utility::conversions::to_string_t("");
    m_CompanyCityIsSet = false;
    m_CompanyStateOrProvince = utility::conversions::to_string_t("");
    m_CompanyStateOrProvinceIsSet = false;
    m_CompanyPostalCode = utility::conversions::to_string_t("");
    m_CompanyPostalCodeIsSet = false;
    m_CompanyCountry = utility::conversions::to_string_t("");
    m_CompanyCountryIsSet = false;
    m_CompanyCountryCode = utility::conversions::to_string_t("");
    m_CompanyCountryCodeIsSet = false;
    m_CompanyTelephone = utility::conversions::to_string_t("");
    m_CompanyTelephoneIsSet = false;
    m_CompanyVATNumber = utility::conversions::to_string_t("");
    m_CompanyVATNumberIsSet = false;
    m_EmployeeCount = 0;
    m_EmployeeCountIsSet = false;
}

LeadEnrichmentResponse::~LeadEnrichmentResponse()
{
}

void LeadEnrichmentResponse::validate()
{
    // TODO: implement validation
}

web::json::value LeadEnrichmentResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t("Successful")] = ModelBase::toJson(m_Successful);
    }
    if(m_LeadTypeIsSet)
    {
        val[utility::conversions::to_string_t("LeadType")] = ModelBase::toJson(m_LeadType);
    }
    if(m_ContactBusinessEmailIsSet)
    {
        val[utility::conversions::to_string_t("ContactBusinessEmail")] = ModelBase::toJson(m_ContactBusinessEmail);
    }
    if(m_ContactFirstNameIsSet)
    {
        val[utility::conversions::to_string_t("ContactFirstName")] = ModelBase::toJson(m_ContactFirstName);
    }
    if(m_ContactLastNameIsSet)
    {
        val[utility::conversions::to_string_t("ContactLastName")] = ModelBase::toJson(m_ContactLastName);
    }
    if(m_ContactGenderIsSet)
    {
        val[utility::conversions::to_string_t("ContactGender")] = ModelBase::toJson(m_ContactGender);
    }
    if(m_CompanyNameIsSet)
    {
        val[utility::conversions::to_string_t("CompanyName")] = ModelBase::toJson(m_CompanyName);
    }
    if(m_CompanyDomainNameIsSet)
    {
        val[utility::conversions::to_string_t("CompanyDomainName")] = ModelBase::toJson(m_CompanyDomainName);
    }
    if(m_CompanyHouseNumberIsSet)
    {
        val[utility::conversions::to_string_t("CompanyHouseNumber")] = ModelBase::toJson(m_CompanyHouseNumber);
    }
    if(m_CompanyStreetIsSet)
    {
        val[utility::conversions::to_string_t("CompanyStreet")] = ModelBase::toJson(m_CompanyStreet);
    }
    if(m_CompanyCityIsSet)
    {
        val[utility::conversions::to_string_t("CompanyCity")] = ModelBase::toJson(m_CompanyCity);
    }
    if(m_CompanyStateOrProvinceIsSet)
    {
        val[utility::conversions::to_string_t("CompanyStateOrProvince")] = ModelBase::toJson(m_CompanyStateOrProvince);
    }
    if(m_CompanyPostalCodeIsSet)
    {
        val[utility::conversions::to_string_t("CompanyPostalCode")] = ModelBase::toJson(m_CompanyPostalCode);
    }
    if(m_CompanyCountryIsSet)
    {
        val[utility::conversions::to_string_t("CompanyCountry")] = ModelBase::toJson(m_CompanyCountry);
    }
    if(m_CompanyCountryCodeIsSet)
    {
        val[utility::conversions::to_string_t("CompanyCountryCode")] = ModelBase::toJson(m_CompanyCountryCode);
    }
    if(m_CompanyTelephoneIsSet)
    {
        val[utility::conversions::to_string_t("CompanyTelephone")] = ModelBase::toJson(m_CompanyTelephone);
    }
    if(m_CompanyVATNumberIsSet)
    {
        val[utility::conversions::to_string_t("CompanyVATNumber")] = ModelBase::toJson(m_CompanyVATNumber);
    }
    if(m_EmployeeCountIsSet)
    {
        val[utility::conversions::to_string_t("EmployeeCount")] = ModelBase::toJson(m_EmployeeCount);
    }

    return val;
}

void LeadEnrichmentResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Successful")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Successful")];
        if(!fieldValue.is_null())
        {
            setSuccessful(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("LeadType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("LeadType")];
        if(!fieldValue.is_null())
        {
            setLeadType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ContactBusinessEmail")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ContactBusinessEmail")];
        if(!fieldValue.is_null())
        {
            setContactBusinessEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ContactFirstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ContactFirstName")];
        if(!fieldValue.is_null())
        {
            setContactFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ContactLastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ContactLastName")];
        if(!fieldValue.is_null())
        {
            setContactLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ContactGender")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ContactGender")];
        if(!fieldValue.is_null())
        {
            setContactGender(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyName")];
        if(!fieldValue.is_null())
        {
            setCompanyName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyDomainName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyDomainName")];
        if(!fieldValue.is_null())
        {
            setCompanyDomainName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyHouseNumber")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyHouseNumber")];
        if(!fieldValue.is_null())
        {
            setCompanyHouseNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyStreet")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyStreet")];
        if(!fieldValue.is_null())
        {
            setCompanyStreet(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyCity")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyCity")];
        if(!fieldValue.is_null())
        {
            setCompanyCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyStateOrProvince")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyStateOrProvince")];
        if(!fieldValue.is_null())
        {
            setCompanyStateOrProvince(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyPostalCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyPostalCode")];
        if(!fieldValue.is_null())
        {
            setCompanyPostalCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyCountry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyCountry")];
        if(!fieldValue.is_null())
        {
            setCompanyCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyCountryCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyCountryCode")];
        if(!fieldValue.is_null())
        {
            setCompanyCountryCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyTelephone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyTelephone")];
        if(!fieldValue.is_null())
        {
            setCompanyTelephone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CompanyVATNumber")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CompanyVATNumber")];
        if(!fieldValue.is_null())
        {
            setCompanyVATNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("EmployeeCount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("EmployeeCount")];
        if(!fieldValue.is_null())
        {
            setEmployeeCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void LeadEnrichmentResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Successful"), m_Successful));
    }
    if(m_LeadTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("LeadType"), m_LeadType));
        
    }
    if(m_ContactBusinessEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ContactBusinessEmail"), m_ContactBusinessEmail));
        
    }
    if(m_ContactFirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ContactFirstName"), m_ContactFirstName));
        
    }
    if(m_ContactLastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ContactLastName"), m_ContactLastName));
        
    }
    if(m_ContactGenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ContactGender"), m_ContactGender));
        
    }
    if(m_CompanyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyName"), m_CompanyName));
        
    }
    if(m_CompanyDomainNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyDomainName"), m_CompanyDomainName));
        
    }
    if(m_CompanyHouseNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyHouseNumber"), m_CompanyHouseNumber));
        
    }
    if(m_CompanyStreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyStreet"), m_CompanyStreet));
        
    }
    if(m_CompanyCityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyCity"), m_CompanyCity));
        
    }
    if(m_CompanyStateOrProvinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyStateOrProvince"), m_CompanyStateOrProvince));
        
    }
    if(m_CompanyPostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyPostalCode"), m_CompanyPostalCode));
        
    }
    if(m_CompanyCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyCountry"), m_CompanyCountry));
        
    }
    if(m_CompanyCountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyCountryCode"), m_CompanyCountryCode));
        
    }
    if(m_CompanyTelephoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyTelephone"), m_CompanyTelephone));
        
    }
    if(m_CompanyVATNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CompanyVATNumber"), m_CompanyVATNumber));
        
    }
    if(m_EmployeeCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("EmployeeCount"), m_EmployeeCount));
    }
}

void LeadEnrichmentResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Successful")))
    {
        setSuccessful(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Successful"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("LeadType")))
    {
        setLeadType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("LeadType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ContactBusinessEmail")))
    {
        setContactBusinessEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ContactBusinessEmail"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ContactFirstName")))
    {
        setContactFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ContactFirstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ContactLastName")))
    {
        setContactLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ContactLastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ContactGender")))
    {
        setContactGender(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ContactGender"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyName")))
    {
        setCompanyName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyDomainName")))
    {
        setCompanyDomainName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyDomainName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyHouseNumber")))
    {
        setCompanyHouseNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyHouseNumber"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyStreet")))
    {
        setCompanyStreet(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyStreet"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyCity")))
    {
        setCompanyCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyCity"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyStateOrProvince")))
    {
        setCompanyStateOrProvince(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyStateOrProvince"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyPostalCode")))
    {
        setCompanyPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyPostalCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyCountry")))
    {
        setCompanyCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyCountry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyCountryCode")))
    {
        setCompanyCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyCountryCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyTelephone")))
    {
        setCompanyTelephone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyTelephone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CompanyVATNumber")))
    {
        setCompanyVATNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CompanyVATNumber"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("EmployeeCount")))
    {
        setEmployeeCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("EmployeeCount"))));
    }
}

bool LeadEnrichmentResponse::isSuccessful() const
{
    return m_Successful;
}


void LeadEnrichmentResponse::setSuccessful(bool value)
{
    m_Successful = value;
    m_SuccessfulIsSet = true;
}
bool LeadEnrichmentResponse::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void LeadEnrichmentResponse::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getLeadType() const
{
    return m_LeadType;
}


void LeadEnrichmentResponse::setLeadType(utility::string_t value)
{
    m_LeadType = value;
    m_LeadTypeIsSet = true;
}
bool LeadEnrichmentResponse::leadTypeIsSet() const
{
    return m_LeadTypeIsSet;
}

void LeadEnrichmentResponse::unsetLeadType()
{
    m_LeadTypeIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getContactBusinessEmail() const
{
    return m_ContactBusinessEmail;
}


void LeadEnrichmentResponse::setContactBusinessEmail(utility::string_t value)
{
    m_ContactBusinessEmail = value;
    m_ContactBusinessEmailIsSet = true;
}
bool LeadEnrichmentResponse::contactBusinessEmailIsSet() const
{
    return m_ContactBusinessEmailIsSet;
}

void LeadEnrichmentResponse::unsetContactBusinessEmail()
{
    m_ContactBusinessEmailIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getContactFirstName() const
{
    return m_ContactFirstName;
}


void LeadEnrichmentResponse::setContactFirstName(utility::string_t value)
{
    m_ContactFirstName = value;
    m_ContactFirstNameIsSet = true;
}
bool LeadEnrichmentResponse::contactFirstNameIsSet() const
{
    return m_ContactFirstNameIsSet;
}

void LeadEnrichmentResponse::unsetContactFirstName()
{
    m_ContactFirstNameIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getContactLastName() const
{
    return m_ContactLastName;
}


void LeadEnrichmentResponse::setContactLastName(utility::string_t value)
{
    m_ContactLastName = value;
    m_ContactLastNameIsSet = true;
}
bool LeadEnrichmentResponse::contactLastNameIsSet() const
{
    return m_ContactLastNameIsSet;
}

void LeadEnrichmentResponse::unsetContactLastName()
{
    m_ContactLastNameIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getContactGender() const
{
    return m_ContactGender;
}


void LeadEnrichmentResponse::setContactGender(utility::string_t value)
{
    m_ContactGender = value;
    m_ContactGenderIsSet = true;
}
bool LeadEnrichmentResponse::contactGenderIsSet() const
{
    return m_ContactGenderIsSet;
}

void LeadEnrichmentResponse::unsetContactGender()
{
    m_ContactGenderIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyName() const
{
    return m_CompanyName;
}


void LeadEnrichmentResponse::setCompanyName(utility::string_t value)
{
    m_CompanyName = value;
    m_CompanyNameIsSet = true;
}
bool LeadEnrichmentResponse::companyNameIsSet() const
{
    return m_CompanyNameIsSet;
}

void LeadEnrichmentResponse::unsetCompanyName()
{
    m_CompanyNameIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyDomainName() const
{
    return m_CompanyDomainName;
}


void LeadEnrichmentResponse::setCompanyDomainName(utility::string_t value)
{
    m_CompanyDomainName = value;
    m_CompanyDomainNameIsSet = true;
}
bool LeadEnrichmentResponse::companyDomainNameIsSet() const
{
    return m_CompanyDomainNameIsSet;
}

void LeadEnrichmentResponse::unsetCompanyDomainName()
{
    m_CompanyDomainNameIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyHouseNumber() const
{
    return m_CompanyHouseNumber;
}


void LeadEnrichmentResponse::setCompanyHouseNumber(utility::string_t value)
{
    m_CompanyHouseNumber = value;
    m_CompanyHouseNumberIsSet = true;
}
bool LeadEnrichmentResponse::companyHouseNumberIsSet() const
{
    return m_CompanyHouseNumberIsSet;
}

void LeadEnrichmentResponse::unsetCompanyHouseNumber()
{
    m_CompanyHouseNumberIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyStreet() const
{
    return m_CompanyStreet;
}


void LeadEnrichmentResponse::setCompanyStreet(utility::string_t value)
{
    m_CompanyStreet = value;
    m_CompanyStreetIsSet = true;
}
bool LeadEnrichmentResponse::companyStreetIsSet() const
{
    return m_CompanyStreetIsSet;
}

void LeadEnrichmentResponse::unsetCompanyStreet()
{
    m_CompanyStreetIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyCity() const
{
    return m_CompanyCity;
}


void LeadEnrichmentResponse::setCompanyCity(utility::string_t value)
{
    m_CompanyCity = value;
    m_CompanyCityIsSet = true;
}
bool LeadEnrichmentResponse::companyCityIsSet() const
{
    return m_CompanyCityIsSet;
}

void LeadEnrichmentResponse::unsetCompanyCity()
{
    m_CompanyCityIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyStateOrProvince() const
{
    return m_CompanyStateOrProvince;
}


void LeadEnrichmentResponse::setCompanyStateOrProvince(utility::string_t value)
{
    m_CompanyStateOrProvince = value;
    m_CompanyStateOrProvinceIsSet = true;
}
bool LeadEnrichmentResponse::companyStateOrProvinceIsSet() const
{
    return m_CompanyStateOrProvinceIsSet;
}

void LeadEnrichmentResponse::unsetCompanyStateOrProvince()
{
    m_CompanyStateOrProvinceIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyPostalCode() const
{
    return m_CompanyPostalCode;
}


void LeadEnrichmentResponse::setCompanyPostalCode(utility::string_t value)
{
    m_CompanyPostalCode = value;
    m_CompanyPostalCodeIsSet = true;
}
bool LeadEnrichmentResponse::companyPostalCodeIsSet() const
{
    return m_CompanyPostalCodeIsSet;
}

void LeadEnrichmentResponse::unsetCompanyPostalCode()
{
    m_CompanyPostalCodeIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyCountry() const
{
    return m_CompanyCountry;
}


void LeadEnrichmentResponse::setCompanyCountry(utility::string_t value)
{
    m_CompanyCountry = value;
    m_CompanyCountryIsSet = true;
}
bool LeadEnrichmentResponse::companyCountryIsSet() const
{
    return m_CompanyCountryIsSet;
}

void LeadEnrichmentResponse::unsetCompanyCountry()
{
    m_CompanyCountryIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyCountryCode() const
{
    return m_CompanyCountryCode;
}


void LeadEnrichmentResponse::setCompanyCountryCode(utility::string_t value)
{
    m_CompanyCountryCode = value;
    m_CompanyCountryCodeIsSet = true;
}
bool LeadEnrichmentResponse::companyCountryCodeIsSet() const
{
    return m_CompanyCountryCodeIsSet;
}

void LeadEnrichmentResponse::unsetCompanyCountryCode()
{
    m_CompanyCountryCodeIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyTelephone() const
{
    return m_CompanyTelephone;
}


void LeadEnrichmentResponse::setCompanyTelephone(utility::string_t value)
{
    m_CompanyTelephone = value;
    m_CompanyTelephoneIsSet = true;
}
bool LeadEnrichmentResponse::companyTelephoneIsSet() const
{
    return m_CompanyTelephoneIsSet;
}

void LeadEnrichmentResponse::unsetCompanyTelephone()
{
    m_CompanyTelephoneIsSet = false;
}

utility::string_t LeadEnrichmentResponse::getCompanyVATNumber() const
{
    return m_CompanyVATNumber;
}


void LeadEnrichmentResponse::setCompanyVATNumber(utility::string_t value)
{
    m_CompanyVATNumber = value;
    m_CompanyVATNumberIsSet = true;
}
bool LeadEnrichmentResponse::companyVATNumberIsSet() const
{
    return m_CompanyVATNumberIsSet;
}

void LeadEnrichmentResponse::unsetCompanyVATNumber()
{
    m_CompanyVATNumberIsSet = false;
}

int32_t LeadEnrichmentResponse::getEmployeeCount() const
{
    return m_EmployeeCount;
}


void LeadEnrichmentResponse::setEmployeeCount(int32_t value)
{
    m_EmployeeCount = value;
    m_EmployeeCountIsSet = true;
}
bool LeadEnrichmentResponse::employeeCountIsSet() const
{
    return m_EmployeeCountIsSet;
}

void LeadEnrichmentResponse::unsetEmployeeCount()
{
    m_EmployeeCountIsSet = false;
}

}
}
}
}

