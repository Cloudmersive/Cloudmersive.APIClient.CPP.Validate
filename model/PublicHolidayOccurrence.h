/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PublicHolidayOccurrence.h
 *
 * Public holiday occurrence
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_PublicHolidayOccurrence_H_
#define IO_SWAGGER_CLIENT_MODEL_PublicHolidayOccurrence_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Public holiday occurrence
/// </summary>
class  PublicHolidayOccurrence
    : public ModelBase
{
public:
    PublicHolidayOccurrence();
    virtual ~PublicHolidayOccurrence();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PublicHolidayOccurrence members

    /// <summary>
    /// Name of the holiday in English
    /// </summary>
    utility::string_t getEnglishName() const;
    bool englishNameIsSet() const;
    void unsetEnglishName();
    void setEnglishName(utility::string_t value);
    /// <summary>
    /// Local name of the holiday
    /// </summary>
    utility::string_t getLocalName() const;
    bool localNameIsSet() const;
    void unsetLocalName();
    void setLocalName(utility::string_t value);
    /// <summary>
    /// Date of the holiday (start time)
    /// </summary>
    utility::datetime getOccurrenceDate() const;
    bool occurrenceDateIsSet() const;
    void unsetOccurrenceDate();
    void setOccurrenceDate(utility::datetime value);
    /// <summary>
    /// Type of the holiday; possible values are: Public, Bank, School, Authorities, Optional, Observance
    /// </summary>
    utility::string_t getHolidayType() const;
    bool holidayTypeIsSet() const;
    void unsetHolidayType();
    void setHolidayType(utility::string_t value);
    /// <summary>
    /// True if the holiday is celebrated in all locales in the country, false otherwise
    /// </summary>
    bool isNationwaide() const;
    bool nationwaideIsSet() const;
    void unsetNationwaide();
    void setNationwaide(bool value);

protected:
    utility::string_t m_EnglishName;
    bool m_EnglishNameIsSet;
    utility::string_t m_LocalName;
    bool m_LocalNameIsSet;
    utility::datetime m_OccurrenceDate;
    bool m_OccurrenceDateIsSet;
    utility::string_t m_HolidayType;
    bool m_HolidayTypeIsSet;
    bool m_Nationwaide;
    bool m_NationwaideIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_PublicHolidayOccurrence_H_ */
