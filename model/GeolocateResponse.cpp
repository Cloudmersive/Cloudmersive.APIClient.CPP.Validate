/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GeolocateResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

GeolocateResponse::GeolocateResponse()
{
    m_CountryCode = utility::conversions::to_string_t("");
    m_CountryCodeIsSet = false;
    m_CountryName = utility::conversions::to_string_t("");
    m_CountryNameIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_RegionCode = utility::conversions::to_string_t("");
    m_RegionCodeIsSet = false;
    m_RegionName = utility::conversions::to_string_t("");
    m_RegionNameIsSet = false;
    m_ZipCode = utility::conversions::to_string_t("");
    m_ZipCodeIsSet = false;
    m_TimezoneStandardName = utility::conversions::to_string_t("");
    m_TimezoneStandardNameIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

GeolocateResponse::~GeolocateResponse()
{
}

void GeolocateResponse::validate()
{
    // TODO: implement validation
}

web::json::value GeolocateResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CountryCodeIsSet)
    {
        val[utility::conversions::to_string_t("CountryCode")] = ModelBase::toJson(m_CountryCode);
    }
    if(m_CountryNameIsSet)
    {
        val[utility::conversions::to_string_t("CountryName")] = ModelBase::toJson(m_CountryName);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("City")] = ModelBase::toJson(m_City);
    }
    if(m_RegionCodeIsSet)
    {
        val[utility::conversions::to_string_t("RegionCode")] = ModelBase::toJson(m_RegionCode);
    }
    if(m_RegionNameIsSet)
    {
        val[utility::conversions::to_string_t("RegionName")] = ModelBase::toJson(m_RegionName);
    }
    if(m_ZipCodeIsSet)
    {
        val[utility::conversions::to_string_t("ZipCode")] = ModelBase::toJson(m_ZipCode);
    }
    if(m_TimezoneStandardNameIsSet)
    {
        val[utility::conversions::to_string_t("TimezoneStandardName")] = ModelBase::toJson(m_TimezoneStandardName);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("Latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("Longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void GeolocateResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("CountryCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryCode")];
        if(!fieldValue.is_null())
        {
            setCountryCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CountryName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryName")];
        if(!fieldValue.is_null())
        {
            setCountryName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("City")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("City")];
        if(!fieldValue.is_null())
        {
            setCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegionCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegionCode")];
        if(!fieldValue.is_null())
        {
            setRegionCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegionName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegionName")];
        if(!fieldValue.is_null())
        {
            setRegionName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ZipCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ZipCode")];
        if(!fieldValue.is_null())
        {
            setZipCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("TimezoneStandardName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("TimezoneStandardName")];
        if(!fieldValue.is_null())
        {
            setTimezoneStandardName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Latitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Latitude")];
        if(!fieldValue.is_null())
        {
            setLatitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Longitude")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Longitude")];
        if(!fieldValue.is_null())
        {
            setLongitude(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void GeolocateResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryCode"), m_CountryCode));
        
    }
    if(m_CountryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryName"), m_CountryName));
        
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("City"), m_City));
        
    }
    if(m_RegionCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegionCode"), m_RegionCode));
        
    }
    if(m_RegionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegionName"), m_RegionName));
        
    }
    if(m_ZipCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ZipCode"), m_ZipCode));
        
    }
    if(m_TimezoneStandardNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("TimezoneStandardName"), m_TimezoneStandardName));
        
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Longitude"), m_Longitude));
    }
}

void GeolocateResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("CountryCode")))
    {
        setCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CountryName")))
    {
        setCountryName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("City")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("City"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegionCode")))
    {
        setRegionCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegionCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegionName")))
    {
        setRegionName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegionName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ZipCode")))
    {
        setZipCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ZipCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("TimezoneStandardName")))
    {
        setTimezoneStandardName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("TimezoneStandardName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Latitude"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Longitude"))));
    }
}

utility::string_t GeolocateResponse::getCountryCode() const
{
    return m_CountryCode;
}


void GeolocateResponse::setCountryCode(utility::string_t value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}
bool GeolocateResponse::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}

void GeolocateResponse::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}

utility::string_t GeolocateResponse::getCountryName() const
{
    return m_CountryName;
}


void GeolocateResponse::setCountryName(utility::string_t value)
{
    m_CountryName = value;
    m_CountryNameIsSet = true;
}
bool GeolocateResponse::countryNameIsSet() const
{
    return m_CountryNameIsSet;
}

void GeolocateResponse::unsetCountryName()
{
    m_CountryNameIsSet = false;
}

utility::string_t GeolocateResponse::getCity() const
{
    return m_City;
}


void GeolocateResponse::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool GeolocateResponse::cityIsSet() const
{
    return m_CityIsSet;
}

void GeolocateResponse::unsetCity()
{
    m_CityIsSet = false;
}

utility::string_t GeolocateResponse::getRegionCode() const
{
    return m_RegionCode;
}


void GeolocateResponse::setRegionCode(utility::string_t value)
{
    m_RegionCode = value;
    m_RegionCodeIsSet = true;
}
bool GeolocateResponse::regionCodeIsSet() const
{
    return m_RegionCodeIsSet;
}

void GeolocateResponse::unsetRegionCode()
{
    m_RegionCodeIsSet = false;
}

utility::string_t GeolocateResponse::getRegionName() const
{
    return m_RegionName;
}


void GeolocateResponse::setRegionName(utility::string_t value)
{
    m_RegionName = value;
    m_RegionNameIsSet = true;
}
bool GeolocateResponse::regionNameIsSet() const
{
    return m_RegionNameIsSet;
}

void GeolocateResponse::unsetRegionName()
{
    m_RegionNameIsSet = false;
}

utility::string_t GeolocateResponse::getZipCode() const
{
    return m_ZipCode;
}


void GeolocateResponse::setZipCode(utility::string_t value)
{
    m_ZipCode = value;
    m_ZipCodeIsSet = true;
}
bool GeolocateResponse::zipCodeIsSet() const
{
    return m_ZipCodeIsSet;
}

void GeolocateResponse::unsetZipCode()
{
    m_ZipCodeIsSet = false;
}

utility::string_t GeolocateResponse::getTimezoneStandardName() const
{
    return m_TimezoneStandardName;
}


void GeolocateResponse::setTimezoneStandardName(utility::string_t value)
{
    m_TimezoneStandardName = value;
    m_TimezoneStandardNameIsSet = true;
}
bool GeolocateResponse::timezoneStandardNameIsSet() const
{
    return m_TimezoneStandardNameIsSet;
}

void GeolocateResponse::unsetTimezoneStandardName()
{
    m_TimezoneStandardNameIsSet = false;
}

double GeolocateResponse::getLatitude() const
{
    return m_Latitude;
}


void GeolocateResponse::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool GeolocateResponse::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void GeolocateResponse::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

double GeolocateResponse::getLongitude() const
{
    return m_Longitude;
}


void GeolocateResponse::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool GeolocateResponse::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void GeolocateResponse::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}

