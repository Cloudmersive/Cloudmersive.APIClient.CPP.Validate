/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserAgentValidateResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserAgentValidateResponse::UserAgentValidateResponse()
{
    m_Successful = false;
    m_SuccessfulIsSet = false;
    m_IsBot = false;
    m_IsBotIsSet = false;
    m_BotName = utility::conversions::to_string_t("");
    m_BotNameIsSet = false;
    m_BotURL = utility::conversions::to_string_t("");
    m_BotURLIsSet = false;
    m_OperatingSystem = utility::conversions::to_string_t("");
    m_OperatingSystemIsSet = false;
    m_OperatingSystemCPUPlatform = utility::conversions::to_string_t("");
    m_OperatingSystemCPUPlatformIsSet = false;
    m_OperatingSystemVersion = utility::conversions::to_string_t("");
    m_OperatingSystemVersionIsSet = false;
    m_DeviceType = utility::conversions::to_string_t("");
    m_DeviceTypeIsSet = false;
    m_DeviceBrandName = utility::conversions::to_string_t("");
    m_DeviceBrandNameIsSet = false;
    m_DeviceModel = utility::conversions::to_string_t("");
    m_DeviceModelIsSet = false;
    m_BrowserName = utility::conversions::to_string_t("");
    m_BrowserNameIsSet = false;
    m_BrowserVersion = utility::conversions::to_string_t("");
    m_BrowserVersionIsSet = false;
    m_BrowserEngineName = utility::conversions::to_string_t("");
    m_BrowserEngineNameIsSet = false;
    m_BrowserEngineVersion = utility::conversions::to_string_t("");
    m_BrowserEngineVersionIsSet = false;
}

UserAgentValidateResponse::~UserAgentValidateResponse()
{
}

void UserAgentValidateResponse::validate()
{
    // TODO: implement validation
}

web::json::value UserAgentValidateResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t("Successful")] = ModelBase::toJson(m_Successful);
    }
    if(m_IsBotIsSet)
    {
        val[utility::conversions::to_string_t("IsBot")] = ModelBase::toJson(m_IsBot);
    }
    if(m_BotNameIsSet)
    {
        val[utility::conversions::to_string_t("BotName")] = ModelBase::toJson(m_BotName);
    }
    if(m_BotURLIsSet)
    {
        val[utility::conversions::to_string_t("BotURL")] = ModelBase::toJson(m_BotURL);
    }
    if(m_OperatingSystemIsSet)
    {
        val[utility::conversions::to_string_t("OperatingSystem")] = ModelBase::toJson(m_OperatingSystem);
    }
    if(m_OperatingSystemCPUPlatformIsSet)
    {
        val[utility::conversions::to_string_t("OperatingSystemCPUPlatform")] = ModelBase::toJson(m_OperatingSystemCPUPlatform);
    }
    if(m_OperatingSystemVersionIsSet)
    {
        val[utility::conversions::to_string_t("OperatingSystemVersion")] = ModelBase::toJson(m_OperatingSystemVersion);
    }
    if(m_DeviceTypeIsSet)
    {
        val[utility::conversions::to_string_t("DeviceType")] = ModelBase::toJson(m_DeviceType);
    }
    if(m_DeviceBrandNameIsSet)
    {
        val[utility::conversions::to_string_t("DeviceBrandName")] = ModelBase::toJson(m_DeviceBrandName);
    }
    if(m_DeviceModelIsSet)
    {
        val[utility::conversions::to_string_t("DeviceModel")] = ModelBase::toJson(m_DeviceModel);
    }
    if(m_BrowserNameIsSet)
    {
        val[utility::conversions::to_string_t("BrowserName")] = ModelBase::toJson(m_BrowserName);
    }
    if(m_BrowserVersionIsSet)
    {
        val[utility::conversions::to_string_t("BrowserVersion")] = ModelBase::toJson(m_BrowserVersion);
    }
    if(m_BrowserEngineNameIsSet)
    {
        val[utility::conversions::to_string_t("BrowserEngineName")] = ModelBase::toJson(m_BrowserEngineName);
    }
    if(m_BrowserEngineVersionIsSet)
    {
        val[utility::conversions::to_string_t("BrowserEngineVersion")] = ModelBase::toJson(m_BrowserEngineVersion);
    }

    return val;
}

void UserAgentValidateResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Successful")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Successful")];
        if(!fieldValue.is_null())
        {
            setSuccessful(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("IsBot")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("IsBot")];
        if(!fieldValue.is_null())
        {
            setIsBot(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BotName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BotName")];
        if(!fieldValue.is_null())
        {
            setBotName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BotURL")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BotURL")];
        if(!fieldValue.is_null())
        {
            setBotURL(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("OperatingSystem")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("OperatingSystem")];
        if(!fieldValue.is_null())
        {
            setOperatingSystem(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("OperatingSystemCPUPlatform")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("OperatingSystemCPUPlatform")];
        if(!fieldValue.is_null())
        {
            setOperatingSystemCPUPlatform(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("OperatingSystemVersion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("OperatingSystemVersion")];
        if(!fieldValue.is_null())
        {
            setOperatingSystemVersion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("DeviceType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("DeviceType")];
        if(!fieldValue.is_null())
        {
            setDeviceType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("DeviceBrandName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("DeviceBrandName")];
        if(!fieldValue.is_null())
        {
            setDeviceBrandName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("DeviceModel")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("DeviceModel")];
        if(!fieldValue.is_null())
        {
            setDeviceModel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BrowserName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BrowserName")];
        if(!fieldValue.is_null())
        {
            setBrowserName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BrowserVersion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BrowserVersion")];
        if(!fieldValue.is_null())
        {
            setBrowserVersion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BrowserEngineName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BrowserEngineName")];
        if(!fieldValue.is_null())
        {
            setBrowserEngineName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BrowserEngineVersion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("BrowserEngineVersion")];
        if(!fieldValue.is_null())
        {
            setBrowserEngineVersion(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UserAgentValidateResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Successful"), m_Successful));
    }
    if(m_IsBotIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("IsBot"), m_IsBot));
    }
    if(m_BotNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BotName"), m_BotName));
        
    }
    if(m_BotURLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BotURL"), m_BotURL));
        
    }
    if(m_OperatingSystemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("OperatingSystem"), m_OperatingSystem));
        
    }
    if(m_OperatingSystemCPUPlatformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("OperatingSystemCPUPlatform"), m_OperatingSystemCPUPlatform));
        
    }
    if(m_OperatingSystemVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("OperatingSystemVersion"), m_OperatingSystemVersion));
        
    }
    if(m_DeviceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("DeviceType"), m_DeviceType));
        
    }
    if(m_DeviceBrandNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("DeviceBrandName"), m_DeviceBrandName));
        
    }
    if(m_DeviceModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("DeviceModel"), m_DeviceModel));
        
    }
    if(m_BrowserNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BrowserName"), m_BrowserName));
        
    }
    if(m_BrowserVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BrowserVersion"), m_BrowserVersion));
        
    }
    if(m_BrowserEngineNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BrowserEngineName"), m_BrowserEngineName));
        
    }
    if(m_BrowserEngineVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BrowserEngineVersion"), m_BrowserEngineVersion));
        
    }
}

void UserAgentValidateResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Successful")))
    {
        setSuccessful(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Successful"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("IsBot")))
    {
        setIsBot(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("IsBot"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BotName")))
    {
        setBotName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BotName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BotURL")))
    {
        setBotURL(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BotURL"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("OperatingSystem")))
    {
        setOperatingSystem(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("OperatingSystem"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("OperatingSystemCPUPlatform")))
    {
        setOperatingSystemCPUPlatform(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("OperatingSystemCPUPlatform"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("OperatingSystemVersion")))
    {
        setOperatingSystemVersion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("OperatingSystemVersion"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("DeviceType")))
    {
        setDeviceType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("DeviceType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("DeviceBrandName")))
    {
        setDeviceBrandName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("DeviceBrandName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("DeviceModel")))
    {
        setDeviceModel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("DeviceModel"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BrowserName")))
    {
        setBrowserName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BrowserName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BrowserVersion")))
    {
        setBrowserVersion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BrowserVersion"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BrowserEngineName")))
    {
        setBrowserEngineName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BrowserEngineName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BrowserEngineVersion")))
    {
        setBrowserEngineVersion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BrowserEngineVersion"))));
    }
}

bool UserAgentValidateResponse::isSuccessful() const
{
    return m_Successful;
}


void UserAgentValidateResponse::setSuccessful(bool value)
{
    m_Successful = value;
    m_SuccessfulIsSet = true;
}
bool UserAgentValidateResponse::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void UserAgentValidateResponse::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}

bool UserAgentValidateResponse::isIsBot() const
{
    return m_IsBot;
}


void UserAgentValidateResponse::setIsBot(bool value)
{
    m_IsBot = value;
    m_IsBotIsSet = true;
}
bool UserAgentValidateResponse::isBotIsSet() const
{
    return m_IsBotIsSet;
}

void UserAgentValidateResponse::unsetIsBot()
{
    m_IsBotIsSet = false;
}

utility::string_t UserAgentValidateResponse::getBotName() const
{
    return m_BotName;
}


void UserAgentValidateResponse::setBotName(utility::string_t value)
{
    m_BotName = value;
    m_BotNameIsSet = true;
}
bool UserAgentValidateResponse::botNameIsSet() const
{
    return m_BotNameIsSet;
}

void UserAgentValidateResponse::unsetBotName()
{
    m_BotNameIsSet = false;
}

utility::string_t UserAgentValidateResponse::getBotURL() const
{
    return m_BotURL;
}


void UserAgentValidateResponse::setBotURL(utility::string_t value)
{
    m_BotURL = value;
    m_BotURLIsSet = true;
}
bool UserAgentValidateResponse::botURLIsSet() const
{
    return m_BotURLIsSet;
}

void UserAgentValidateResponse::unsetBotURL()
{
    m_BotURLIsSet = false;
}

utility::string_t UserAgentValidateResponse::getOperatingSystem() const
{
    return m_OperatingSystem;
}


void UserAgentValidateResponse::setOperatingSystem(utility::string_t value)
{
    m_OperatingSystem = value;
    m_OperatingSystemIsSet = true;
}
bool UserAgentValidateResponse::operatingSystemIsSet() const
{
    return m_OperatingSystemIsSet;
}

void UserAgentValidateResponse::unsetOperatingSystem()
{
    m_OperatingSystemIsSet = false;
}

utility::string_t UserAgentValidateResponse::getOperatingSystemCPUPlatform() const
{
    return m_OperatingSystemCPUPlatform;
}


void UserAgentValidateResponse::setOperatingSystemCPUPlatform(utility::string_t value)
{
    m_OperatingSystemCPUPlatform = value;
    m_OperatingSystemCPUPlatformIsSet = true;
}
bool UserAgentValidateResponse::operatingSystemCPUPlatformIsSet() const
{
    return m_OperatingSystemCPUPlatformIsSet;
}

void UserAgentValidateResponse::unsetOperatingSystemCPUPlatform()
{
    m_OperatingSystemCPUPlatformIsSet = false;
}

utility::string_t UserAgentValidateResponse::getOperatingSystemVersion() const
{
    return m_OperatingSystemVersion;
}


void UserAgentValidateResponse::setOperatingSystemVersion(utility::string_t value)
{
    m_OperatingSystemVersion = value;
    m_OperatingSystemVersionIsSet = true;
}
bool UserAgentValidateResponse::operatingSystemVersionIsSet() const
{
    return m_OperatingSystemVersionIsSet;
}

void UserAgentValidateResponse::unsetOperatingSystemVersion()
{
    m_OperatingSystemVersionIsSet = false;
}

utility::string_t UserAgentValidateResponse::getDeviceType() const
{
    return m_DeviceType;
}


void UserAgentValidateResponse::setDeviceType(utility::string_t value)
{
    m_DeviceType = value;
    m_DeviceTypeIsSet = true;
}
bool UserAgentValidateResponse::deviceTypeIsSet() const
{
    return m_DeviceTypeIsSet;
}

void UserAgentValidateResponse::unsetDeviceType()
{
    m_DeviceTypeIsSet = false;
}

utility::string_t UserAgentValidateResponse::getDeviceBrandName() const
{
    return m_DeviceBrandName;
}


void UserAgentValidateResponse::setDeviceBrandName(utility::string_t value)
{
    m_DeviceBrandName = value;
    m_DeviceBrandNameIsSet = true;
}
bool UserAgentValidateResponse::deviceBrandNameIsSet() const
{
    return m_DeviceBrandNameIsSet;
}

void UserAgentValidateResponse::unsetDeviceBrandName()
{
    m_DeviceBrandNameIsSet = false;
}

utility::string_t UserAgentValidateResponse::getDeviceModel() const
{
    return m_DeviceModel;
}


void UserAgentValidateResponse::setDeviceModel(utility::string_t value)
{
    m_DeviceModel = value;
    m_DeviceModelIsSet = true;
}
bool UserAgentValidateResponse::deviceModelIsSet() const
{
    return m_DeviceModelIsSet;
}

void UserAgentValidateResponse::unsetDeviceModel()
{
    m_DeviceModelIsSet = false;
}

utility::string_t UserAgentValidateResponse::getBrowserName() const
{
    return m_BrowserName;
}


void UserAgentValidateResponse::setBrowserName(utility::string_t value)
{
    m_BrowserName = value;
    m_BrowserNameIsSet = true;
}
bool UserAgentValidateResponse::browserNameIsSet() const
{
    return m_BrowserNameIsSet;
}

void UserAgentValidateResponse::unsetBrowserName()
{
    m_BrowserNameIsSet = false;
}

utility::string_t UserAgentValidateResponse::getBrowserVersion() const
{
    return m_BrowserVersion;
}


void UserAgentValidateResponse::setBrowserVersion(utility::string_t value)
{
    m_BrowserVersion = value;
    m_BrowserVersionIsSet = true;
}
bool UserAgentValidateResponse::browserVersionIsSet() const
{
    return m_BrowserVersionIsSet;
}

void UserAgentValidateResponse::unsetBrowserVersion()
{
    m_BrowserVersionIsSet = false;
}

utility::string_t UserAgentValidateResponse::getBrowserEngineName() const
{
    return m_BrowserEngineName;
}


void UserAgentValidateResponse::setBrowserEngineName(utility::string_t value)
{
    m_BrowserEngineName = value;
    m_BrowserEngineNameIsSet = true;
}
bool UserAgentValidateResponse::browserEngineNameIsSet() const
{
    return m_BrowserEngineNameIsSet;
}

void UserAgentValidateResponse::unsetBrowserEngineName()
{
    m_BrowserEngineNameIsSet = false;
}

utility::string_t UserAgentValidateResponse::getBrowserEngineVersion() const
{
    return m_BrowserEngineVersion;
}


void UserAgentValidateResponse::setBrowserEngineVersion(utility::string_t value)
{
    m_BrowserEngineVersion = value;
    m_BrowserEngineVersionIsSet = true;
}
bool UserAgentValidateResponse::browserEngineVersionIsSet() const
{
    return m_BrowserEngineVersionIsSet;
}

void UserAgentValidateResponse::unsetBrowserEngineVersion()
{
    m_BrowserEngineVersionIsSet = false;
}

}
}
}
}

