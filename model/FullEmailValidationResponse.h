/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * FullEmailValidationResponse.h
 *
 * Full email addresss validation result
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_FullEmailValidationResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_FullEmailValidationResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Full email addresss validation result
/// </summary>
class  FullEmailValidationResponse
    : public ModelBase
{
public:
    FullEmailValidationResponse();
    virtual ~FullEmailValidationResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FullEmailValidationResponse members

    /// <summary>
    /// True if the email address is valid overall, false otherwise
    /// </summary>
    bool isValidAddress() const;
    bool validAddressIsSet() const;
    void unsetValidAddress();
    void setValidAddress(bool value);
    /// <summary>
    /// Email server connected to for verification
    /// </summary>
    utility::string_t getMailServerUsedForValidation() const;
    bool mailServerUsedForValidationIsSet() const;
    void unsetMailServerUsedForValidation();
    void setMailServerUsedForValidation(utility::string_t value);
    /// <summary>
    /// True if the syntax of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.
    /// </summary>
    bool isValidSyntax() const;
    bool validSyntaxIsSet() const;
    void unsetValid_Syntax();
    void setValidSyntax(bool value);
    /// <summary>
    /// True if the domain name of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.
    /// </summary>
    bool isValidDomain() const;
    bool validDomainIsSet() const;
    void unsetValid_Domain();
    void setValidDomain(bool value);
    /// <summary>
    /// True if the email address was verified by the remote server, false otherwise.  This is one component of ValidAddress, but not the only one.
    /// </summary>
    bool isValidSMTP() const;
    bool validSMTPIsSet() const;
    void unsetValid_SMTP();
    void setValidSMTP(bool value);
    /// <summary>
    /// True if the domain is a catch-all domain name, false otherwise.  Catch-all domain names, while rare, always accept inbound email to ensure they do not lose any potentially useful emails.  Catch-all domain names can occassionally be configured to first accept and store all inbound email, but then later send a bounce email back to the sender after a delayed period of time.
    /// </summary>
    bool isIsCatchallDomain() const;
    bool isCatchallDomainIsSet() const;
    void unsetIsCatchallDomain();
    void setIsCatchallDomain(bool value);
    /// <summary>
    /// Domain name of the email address
    /// </summary>
    utility::string_t getDomain() const;
    bool domainIsSet() const;
    void unsetDomain();
    void setDomain(utility::string_t value);
    /// <summary>
    /// True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise.
    /// </summary>
    bool isIsFreeEmailProvider() const;
    bool isFreeEmailProviderIsSet() const;
    void unsetIsFreeEmailProvider();
    void setIsFreeEmailProvider(bool value);
    /// <summary>
    /// True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there.
    /// </summary>
    bool isIsDisposable() const;
    bool isDisposableIsSet() const;
    void unsetIsDisposable();
    void setIsDisposable(bool value);

protected:
    bool m_ValidAddress;
    bool m_ValidAddressIsSet;
    utility::string_t m_MailServerUsedForValidation;
    bool m_MailServerUsedForValidationIsSet;
    bool m_Valid_Syntax;
    bool m_Valid_SyntaxIsSet;
    bool m_Valid_Domain;
    bool m_Valid_DomainIsSet;
    bool m_Valid_SMTP;
    bool m_Valid_SMTPIsSet;
    bool m_IsCatchallDomain;
    bool m_IsCatchallDomainIsSet;
    utility::string_t m_Domain;
    bool m_DomainIsSet;
    bool m_IsFreeEmailProvider;
    bool m_IsFreeEmailProviderIsSet;
    bool m_IsDisposable;
    bool m_IsDisposableIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_FullEmailValidationResponse_H_ */
