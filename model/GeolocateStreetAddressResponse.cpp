/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GeolocateStreetAddressResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

GeolocateStreetAddressResponse::GeolocateStreetAddressResponse()
{
    m_CountryCode = utility::conversions::to_string_t("");
    m_CountryCodeIsSet = false;
    m_CountryName = utility::conversions::to_string_t("");
    m_CountryNameIsSet = false;
    m_StreetAddress = utility::conversions::to_string_t("");
    m_StreetAddressIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_RegionName = utility::conversions::to_string_t("");
    m_RegionNameIsSet = false;
    m_ZipCode = utility::conversions::to_string_t("");
    m_ZipCodeIsSet = false;
}

GeolocateStreetAddressResponse::~GeolocateStreetAddressResponse()
{
}

void GeolocateStreetAddressResponse::validate()
{
    // TODO: implement validation
}

web::json::value GeolocateStreetAddressResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CountryCodeIsSet)
    {
        val[utility::conversions::to_string_t("CountryCode")] = ModelBase::toJson(m_CountryCode);
    }
    if(m_CountryNameIsSet)
    {
        val[utility::conversions::to_string_t("CountryName")] = ModelBase::toJson(m_CountryName);
    }
    if(m_StreetAddressIsSet)
    {
        val[utility::conversions::to_string_t("StreetAddress")] = ModelBase::toJson(m_StreetAddress);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("City")] = ModelBase::toJson(m_City);
    }
    if(m_RegionNameIsSet)
    {
        val[utility::conversions::to_string_t("RegionName")] = ModelBase::toJson(m_RegionName);
    }
    if(m_ZipCodeIsSet)
    {
        val[utility::conversions::to_string_t("ZipCode")] = ModelBase::toJson(m_ZipCode);
    }

    return val;
}

void GeolocateStreetAddressResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("CountryCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryCode")];
        if(!fieldValue.is_null())
        {
            setCountryCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CountryName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryName")];
        if(!fieldValue.is_null())
        {
            setCountryName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("StreetAddress")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("StreetAddress")];
        if(!fieldValue.is_null())
        {
            setStreetAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("City")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("City")];
        if(!fieldValue.is_null())
        {
            setCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RegionName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("RegionName")];
        if(!fieldValue.is_null())
        {
            setRegionName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ZipCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ZipCode")];
        if(!fieldValue.is_null())
        {
            setZipCode(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void GeolocateStreetAddressResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryCode"), m_CountryCode));
        
    }
    if(m_CountryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryName"), m_CountryName));
        
    }
    if(m_StreetAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("StreetAddress"), m_StreetAddress));
        
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("City"), m_City));
        
    }
    if(m_RegionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RegionName"), m_RegionName));
        
    }
    if(m_ZipCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ZipCode"), m_ZipCode));
        
    }
}

void GeolocateStreetAddressResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("CountryCode")))
    {
        setCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CountryName")))
    {
        setCountryName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("StreetAddress")))
    {
        setStreetAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("StreetAddress"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("City")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("City"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RegionName")))
    {
        setRegionName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("RegionName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ZipCode")))
    {
        setZipCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ZipCode"))));
    }
}

utility::string_t GeolocateStreetAddressResponse::getCountryCode() const
{
    return m_CountryCode;
}


void GeolocateStreetAddressResponse::setCountryCode(utility::string_t value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}
bool GeolocateStreetAddressResponse::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}

void GeolocateStreetAddressResponse::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}

utility::string_t GeolocateStreetAddressResponse::getCountryName() const
{
    return m_CountryName;
}


void GeolocateStreetAddressResponse::setCountryName(utility::string_t value)
{
    m_CountryName = value;
    m_CountryNameIsSet = true;
}
bool GeolocateStreetAddressResponse::countryNameIsSet() const
{
    return m_CountryNameIsSet;
}

void GeolocateStreetAddressResponse::unsetCountryName()
{
    m_CountryNameIsSet = false;
}

utility::string_t GeolocateStreetAddressResponse::getStreetAddress() const
{
    return m_StreetAddress;
}


void GeolocateStreetAddressResponse::setStreetAddress(utility::string_t value)
{
    m_StreetAddress = value;
    m_StreetAddressIsSet = true;
}
bool GeolocateStreetAddressResponse::streetAddressIsSet() const
{
    return m_StreetAddressIsSet;
}

void GeolocateStreetAddressResponse::unsetStreetAddress()
{
    m_StreetAddressIsSet = false;
}

utility::string_t GeolocateStreetAddressResponse::getCity() const
{
    return m_City;
}


void GeolocateStreetAddressResponse::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool GeolocateStreetAddressResponse::cityIsSet() const
{
    return m_CityIsSet;
}

void GeolocateStreetAddressResponse::unsetCity()
{
    m_CityIsSet = false;
}

utility::string_t GeolocateStreetAddressResponse::getRegionName() const
{
    return m_RegionName;
}


void GeolocateStreetAddressResponse::setRegionName(utility::string_t value)
{
    m_RegionName = value;
    m_RegionNameIsSet = true;
}
bool GeolocateStreetAddressResponse::regionNameIsSet() const
{
    return m_RegionNameIsSet;
}

void GeolocateStreetAddressResponse::unsetRegionName()
{
    m_RegionNameIsSet = false;
}

utility::string_t GeolocateStreetAddressResponse::getZipCode() const
{
    return m_ZipCode;
}


void GeolocateStreetAddressResponse::setZipCode(utility::string_t value)
{
    m_ZipCode = value;
    m_ZipCodeIsSet = true;
}
bool GeolocateStreetAddressResponse::zipCodeIsSet() const
{
    return m_ZipCodeIsSet;
}

void GeolocateStreetAddressResponse::unsetZipCode()
{
    m_ZipCodeIsSet = false;
}

}
}
}
}

