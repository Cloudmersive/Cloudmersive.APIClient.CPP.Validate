/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ParseAddressResponse.h
 *
 * Result of parsing an address into its component parts
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_ParseAddressResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_ParseAddressResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Result of parsing an address into its component parts
/// </summary>
class  ParseAddressResponse
    : public ModelBase
{
public:
    ParseAddressResponse();
    virtual ~ParseAddressResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ParseAddressResponse members

    /// <summary>
    /// True if the parsing operation was successful, false otherwise
    /// </summary>
    bool isSuccessful() const;
    bool successfulIsSet() const;
    void unsetSuccessful();
    void setSuccessful(bool value);
    /// <summary>
    /// The name of the building, house or structure if applicable, such as \&quot;Cloudmersive Building 2\&quot;.  This will often by null.
    /// </summary>
    utility::string_t getBuilding() const;
    bool buildingIsSet() const;
    void unsetBuilding();
    void setBuilding(utility::string_t value);
    /// <summary>
    /// The street number or house number of the address.  For example, in the address \&quot;1600 Pennsylvania Avenue NW\&quot; the street number would be \&quot;1600\&quot;.  This value will typically be populated for most addresses.
    /// </summary>
    utility::string_t getStreetNumber() const;
    bool streetNumberIsSet() const;
    void unsetStreetNumber();
    void setStreetNumber(utility::string_t value);
    /// <summary>
    /// The name of the street or road of the address.  For example, in the address \&quot;1600 Pennsylvania Avenue NW\&quot; the street number would be \&quot;Pennsylvania Avenue NW\&quot;.
    /// </summary>
    utility::string_t getStreet() const;
    bool streetIsSet() const;
    void unsetStreet();
    void setStreet(utility::string_t value);
    /// <summary>
    /// The city of the address.
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();
    void setCity(utility::string_t value);
    /// <summary>
    /// The state or province of the address.
    /// </summary>
    utility::string_t getStateOrProvince() const;
    bool stateOrProvinceIsSet() const;
    void unsetStateOrProvince();
    void setStateOrProvince(utility::string_t value);
    /// <summary>
    /// The postal code or zip code of the address.
    /// </summary>
    utility::string_t getPostalCode() const;
    bool postalCodeIsSet() const;
    void unsetPostalCode();
    void setPostalCode(utility::string_t value);
    /// <summary>
    /// Country of the address, if present in the address.  If not included in the address it will be null.
    /// </summary>
    utility::string_t getCountryFullName() const;
    bool countryFullNameIsSet() const;
    void unsetCountryFullName();
    void setCountryFullName(utility::string_t value);
    /// <summary>
    /// Two-letter ISO 3166-1 country code
    /// </summary>
    utility::string_t getISOTwoLetterCode() const;
    bool iSOTwoLetterCodeIsSet() const;
    void unsetISOTwoLetterCode();
    void setISOTwoLetterCode(utility::string_t value);

protected:
    bool m_Successful;
    bool m_SuccessfulIsSet;
    utility::string_t m_Building;
    bool m_BuildingIsSet;
    utility::string_t m_StreetNumber;
    bool m_StreetNumberIsSet;
    utility::string_t m_Street;
    bool m_StreetIsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_StateOrProvince;
    bool m_StateOrProvinceIsSet;
    utility::string_t m_PostalCode;
    bool m_PostalCodeIsSet;
    utility::string_t m_CountryFullName;
    bool m_CountryFullNameIsSet;
    utility::string_t m_ISOTwoLetterCode;
    bool m_ISOTwoLetterCodeIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_ParseAddressResponse_H_ */
