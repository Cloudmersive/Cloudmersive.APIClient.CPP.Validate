/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PhoneNumberValidationResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PhoneNumberValidationResponse::PhoneNumberValidationResponse()
{
    m_IsValid = false;
    m_IsValidIsSet = false;
    m_Successful = false;
    m_SuccessfulIsSet = false;
    m_PhoneNumberType = utility::conversions::to_string_t("");
    m_PhoneNumberTypeIsSet = false;
    m_E164Format = utility::conversions::to_string_t("");
    m_E164FormatIsSet = false;
    m_InternationalFormat = utility::conversions::to_string_t("");
    m_InternationalFormatIsSet = false;
    m_NationalFormat = utility::conversions::to_string_t("");
    m_NationalFormatIsSet = false;
    m_CountryCode = utility::conversions::to_string_t("");
    m_CountryCodeIsSet = false;
    m_CountryName = utility::conversions::to_string_t("");
    m_CountryNameIsSet = false;
}

PhoneNumberValidationResponse::~PhoneNumberValidationResponse()
{
}

void PhoneNumberValidationResponse::validate()
{
    // TODO: implement validation
}

web::json::value PhoneNumberValidationResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IsValidIsSet)
    {
        val[utility::conversions::to_string_t("IsValid")] = ModelBase::toJson(m_IsValid);
    }
    if(m_SuccessfulIsSet)
    {
        val[utility::conversions::to_string_t("Successful")] = ModelBase::toJson(m_Successful);
    }
    if(m_PhoneNumberTypeIsSet)
    {
        val[utility::conversions::to_string_t("PhoneNumberType")] = ModelBase::toJson(m_PhoneNumberType);
    }
    if(m_E164FormatIsSet)
    {
        val[utility::conversions::to_string_t("E164Format")] = ModelBase::toJson(m_E164Format);
    }
    if(m_InternationalFormatIsSet)
    {
        val[utility::conversions::to_string_t("InternationalFormat")] = ModelBase::toJson(m_InternationalFormat);
    }
    if(m_NationalFormatIsSet)
    {
        val[utility::conversions::to_string_t("NationalFormat")] = ModelBase::toJson(m_NationalFormat);
    }
    if(m_CountryCodeIsSet)
    {
        val[utility::conversions::to_string_t("CountryCode")] = ModelBase::toJson(m_CountryCode);
    }
    if(m_CountryNameIsSet)
    {
        val[utility::conversions::to_string_t("CountryName")] = ModelBase::toJson(m_CountryName);
    }

    return val;
}

void PhoneNumberValidationResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("IsValid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("IsValid")];
        if(!fieldValue.is_null())
        {
            setIsValid(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Successful")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Successful")];
        if(!fieldValue.is_null())
        {
            setSuccessful(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("PhoneNumberType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("PhoneNumberType")];
        if(!fieldValue.is_null())
        {
            setPhoneNumberType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("E164Format")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("E164Format")];
        if(!fieldValue.is_null())
        {
            setE164Format(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("InternationalFormat")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("InternationalFormat")];
        if(!fieldValue.is_null())
        {
            setInternationalFormat(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("NationalFormat")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("NationalFormat")];
        if(!fieldValue.is_null())
        {
            setNationalFormat(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CountryCode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryCode")];
        if(!fieldValue.is_null())
        {
            setCountryCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CountryName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("CountryName")];
        if(!fieldValue.is_null())
        {
            setCountryName(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void PhoneNumberValidationResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IsValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("IsValid"), m_IsValid));
    }
    if(m_SuccessfulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Successful"), m_Successful));
    }
    if(m_PhoneNumberTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("PhoneNumberType"), m_PhoneNumberType));
        
    }
    if(m_E164FormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("E164Format"), m_E164Format));
        
    }
    if(m_InternationalFormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("InternationalFormat"), m_InternationalFormat));
        
    }
    if(m_NationalFormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("NationalFormat"), m_NationalFormat));
        
    }
    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryCode"), m_CountryCode));
        
    }
    if(m_CountryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("CountryName"), m_CountryName));
        
    }
}

void PhoneNumberValidationResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("IsValid")))
    {
        setIsValid(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("IsValid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Successful")))
    {
        setSuccessful(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Successful"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("PhoneNumberType")))
    {
        setPhoneNumberType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("PhoneNumberType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("E164Format")))
    {
        setE164Format(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("E164Format"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("InternationalFormat")))
    {
        setInternationalFormat(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("InternationalFormat"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("NationalFormat")))
    {
        setNationalFormat(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("NationalFormat"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CountryCode")))
    {
        setCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CountryName")))
    {
        setCountryName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("CountryName"))));
    }
}

bool PhoneNumberValidationResponse::isIsValid() const
{
    return m_IsValid;
}


void PhoneNumberValidationResponse::setIsValid(bool value)
{
    m_IsValid = value;
    m_IsValidIsSet = true;
}
bool PhoneNumberValidationResponse::isValidIsSet() const
{
    return m_IsValidIsSet;
}

void PhoneNumberValidationResponse::unsetIsValid()
{
    m_IsValidIsSet = false;
}

bool PhoneNumberValidationResponse::isSuccessful() const
{
    return m_Successful;
}


void PhoneNumberValidationResponse::setSuccessful(bool value)
{
    m_Successful = value;
    m_SuccessfulIsSet = true;
}
bool PhoneNumberValidationResponse::successfulIsSet() const
{
    return m_SuccessfulIsSet;
}

void PhoneNumberValidationResponse::unsetSuccessful()
{
    m_SuccessfulIsSet = false;
}

utility::string_t PhoneNumberValidationResponse::getPhoneNumberType() const
{
    return m_PhoneNumberType;
}


void PhoneNumberValidationResponse::setPhoneNumberType(utility::string_t value)
{
    m_PhoneNumberType = value;
    m_PhoneNumberTypeIsSet = true;
}
bool PhoneNumberValidationResponse::phoneNumberTypeIsSet() const
{
    return m_PhoneNumberTypeIsSet;
}

void PhoneNumberValidationResponse::unsetPhoneNumberType()
{
    m_PhoneNumberTypeIsSet = false;
}

utility::string_t PhoneNumberValidationResponse::getE164Format() const
{
    return m_E164Format;
}


void PhoneNumberValidationResponse::setE164Format(utility::string_t value)
{
    m_E164Format = value;
    m_E164FormatIsSet = true;
}
bool PhoneNumberValidationResponse::e164FormatIsSet() const
{
    return m_E164FormatIsSet;
}

void PhoneNumberValidationResponse::unsetE164Format()
{
    m_E164FormatIsSet = false;
}

utility::string_t PhoneNumberValidationResponse::getInternationalFormat() const
{
    return m_InternationalFormat;
}


void PhoneNumberValidationResponse::setInternationalFormat(utility::string_t value)
{
    m_InternationalFormat = value;
    m_InternationalFormatIsSet = true;
}
bool PhoneNumberValidationResponse::internationalFormatIsSet() const
{
    return m_InternationalFormatIsSet;
}

void PhoneNumberValidationResponse::unsetInternationalFormat()
{
    m_InternationalFormatIsSet = false;
}

utility::string_t PhoneNumberValidationResponse::getNationalFormat() const
{
    return m_NationalFormat;
}


void PhoneNumberValidationResponse::setNationalFormat(utility::string_t value)
{
    m_NationalFormat = value;
    m_NationalFormatIsSet = true;
}
bool PhoneNumberValidationResponse::nationalFormatIsSet() const
{
    return m_NationalFormatIsSet;
}

void PhoneNumberValidationResponse::unsetNationalFormat()
{
    m_NationalFormatIsSet = false;
}

utility::string_t PhoneNumberValidationResponse::getCountryCode() const
{
    return m_CountryCode;
}


void PhoneNumberValidationResponse::setCountryCode(utility::string_t value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}
bool PhoneNumberValidationResponse::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}

void PhoneNumberValidationResponse::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}

utility::string_t PhoneNumberValidationResponse::getCountryName() const
{
    return m_CountryName;
}


void PhoneNumberValidationResponse::setCountryName(utility::string_t value)
{
    m_CountryName = value;
    m_CountryNameIsSet = true;
}
bool PhoneNumberValidationResponse::countryNameIsSet() const
{
    return m_CountryNameIsSet;
}

void PhoneNumberValidationResponse::unsetCountryName()
{
    m_CountryNameIsSet = false;
}

}
}
}
}

