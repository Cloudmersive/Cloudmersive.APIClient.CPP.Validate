/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * XxeDetectionRequestItem.h
 *
 * Individual item to detect for XXE
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_XxeDetectionRequestItem_H_
#define IO_SWAGGER_CLIENT_MODEL_XxeDetectionRequestItem_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Individual item to detect for XXE
/// </summary>
class  XxeDetectionRequestItem
    : public ModelBase
{
public:
    XxeDetectionRequestItem();
    virtual ~XxeDetectionRequestItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// XxeDetectionRequestItem members

    /// <summary>
    /// Individual input text item to protect from XXE
    /// </summary>
    utility::string_t getInputText() const;
    bool inputTextIsSet() const;
    void unsetInputText();
    void setInputText(utility::string_t value);
    /// <summary>
    /// Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false.
    /// </summary>
    bool isAllowInternetUrls() const;
    bool allowInternetUrlsIsSet() const;
    void unsetAllowInternetUrls();
    void setAllowInternetUrls(bool value);
    /// <summary>
    /// Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe.
    /// </summary>
    std::vector<utility::string_t>& getKnownSafeUrls();
    bool knownSafeUrlsIsSet() const;
    void unsetKnownSafeUrls();
    void setKnownSafeUrls(std::vector<utility::string_t> value);
    /// <summary>
    /// Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe.
    /// </summary>
    std::vector<utility::string_t>& getKnownUnsafeUrls();
    bool knownUnsafeUrlsIsSet() const;
    void unsetKnownUnsafeUrls();
    void setKnownUnsafeUrls(std::vector<utility::string_t> value);

protected:
    utility::string_t m_InputText;
    bool m_InputTextIsSet;
    bool m_AllowInternetUrls;
    bool m_AllowInternetUrlsIsSet;
    std::vector<utility::string_t> m_KnownSafeUrls;
    bool m_KnownSafeUrlsIsSet;
    std::vector<utility::string_t> m_KnownUnsafeUrls;
    bool m_KnownUnsafeUrlsIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_XxeDetectionRequestItem_H_ */
