/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.10.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * VatLookupResponse.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_VatLookupResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_VatLookupResponse_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  VatLookupResponse
    : public ModelBase
{
public:
    VatLookupResponse();
    virtual ~VatLookupResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// VatLookupResponse members

    /// <summary>
    /// Two-letter country code
    /// </summary>
    utility::string_t getCountryCode() const;
    bool countryCodeIsSet() const;
    void unsetCountryCode();
    void setCountryCode(utility::string_t value);
    /// <summary>
    /// VAT number
    /// </summary>
    utility::string_t getVatNumber() const;
    bool vatNumberIsSet() const;
    void unsetVatNumber();
    void setVatNumber(utility::string_t value);
    /// <summary>
    /// True if the VAT code is valid, false otherwise
    /// </summary>
    bool isIsValid() const;
    bool isValidIsSet() const;
    void unsetIsValid();
    void setIsValid(bool value);
    /// <summary>
    /// Name of the business
    /// </summary>
    utility::string_t getBusinessName() const;
    bool businessNameIsSet() const;
    void unsetBusinessName();
    void setBusinessName(utility::string_t value);
    /// <summary>
    /// Business address as a single string
    /// </summary>
    utility::string_t getBusinessAddress() const;
    bool businessAddressIsSet() const;
    void unsetBusinessAddress();
    void setBusinessAddress(utility::string_t value);
    /// <summary>
    /// For the business address, the name of the building, house or structure if applicable, such as \&quot;Cloudmersive Building 2\&quot;.  This will often by null.
    /// </summary>
    utility::string_t getBusinessBuilding() const;
    bool businessBuildingIsSet() const;
    void unsetBusinessBuilding();
    void setBusinessBuilding(utility::string_t value);
    /// <summary>
    /// For the business address, the street number or house number of the address.  For example, in the address \&quot;1600 Pennsylvania Avenue NW\&quot; the street number would be \&quot;1600\&quot;.  This value will typically be populated for most addresses.
    /// </summary>
    utility::string_t getBusinessStreetNumber() const;
    bool businessStreetNumberIsSet() const;
    void unsetBusinessStreetNumber();
    void setBusinessStreetNumber(utility::string_t value);
    /// <summary>
    /// For the business address, the name of the street or road of the address.  For example, in the address \&quot;1600 Pennsylvania Avenue NW\&quot; the street number would be \&quot;Pennsylvania Avenue NW\&quot;.
    /// </summary>
    utility::string_t getBusinessStreet() const;
    bool businessStreetIsSet() const;
    void unsetBusinessStreet();
    void setBusinessStreet(utility::string_t value);
    /// <summary>
    /// For the business address, the city of the address.
    /// </summary>
    utility::string_t getBusinessCity() const;
    bool businessCityIsSet() const;
    void unsetBusinessCity();
    void setBusinessCity(utility::string_t value);
    /// <summary>
    /// For the business address, the state or province of the address.
    /// </summary>
    utility::string_t getBusinessStateOrProvince() const;
    bool businessStateOrProvinceIsSet() const;
    void unsetBusinessStateOrProvince();
    void setBusinessStateOrProvince(utility::string_t value);
    /// <summary>
    /// For the business address, the postal code or zip code of the address.
    /// </summary>
    utility::string_t getBusinessPostalCode() const;
    bool businessPostalCodeIsSet() const;
    void unsetBusinessPostalCode();
    void setBusinessPostalCode(utility::string_t value);
    /// <summary>
    /// For the business address, country of the address, if present in the address.  If not included in the address it will be null.
    /// </summary>
    utility::string_t getBusinessCountry() const;
    bool businessCountryIsSet() const;
    void unsetBusinessCountry();
    void setBusinessCountry(utility::string_t value);

protected:
    utility::string_t m_CountryCode;
    bool m_CountryCodeIsSet;
    utility::string_t m_VatNumber;
    bool m_VatNumberIsSet;
    bool m_IsValid;
    bool m_IsValidIsSet;
    utility::string_t m_BusinessName;
    bool m_BusinessNameIsSet;
    utility::string_t m_BusinessAddress;
    bool m_BusinessAddressIsSet;
    utility::string_t m_BusinessBuilding;
    bool m_BusinessBuildingIsSet;
    utility::string_t m_BusinessStreetNumber;
    bool m_BusinessStreetNumberIsSet;
    utility::string_t m_BusinessStreet;
    bool m_BusinessStreetIsSet;
    utility::string_t m_BusinessCity;
    bool m_BusinessCityIsSet;
    utility::string_t m_BusinessStateOrProvince;
    bool m_BusinessStateOrProvinceIsSet;
    utility::string_t m_BusinessPostalCode;
    bool m_BusinessPostalCodeIsSet;
    utility::string_t m_BusinessCountry;
    bool m_BusinessCountryIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_VatLookupResponse_H_ */
