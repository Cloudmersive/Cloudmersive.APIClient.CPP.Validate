/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SqlInjectionCheckBatchRequest.h
 *
 * Input to a batch SQL Injection detection operation
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_SqlInjectionCheckBatchRequest_H_
#define IO_SWAGGER_CLIENT_MODEL_SqlInjectionCheckBatchRequest_H_


#include "../ModelBase.h"

#include "SqlInjectionCheckRequestItem.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Input to a batch SQL Injection detection operation
/// </summary>
class  SqlInjectionCheckBatchRequest
    : public ModelBase
{
public:
    SqlInjectionCheckBatchRequest();
    virtual ~SqlInjectionCheckBatchRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SqlInjectionCheckBatchRequest members

    /// <summary>
    /// Multiple items to detect for SQL Injection
    /// </summary>
    std::vector<std::shared_ptr<SqlInjectionCheckRequestItem>>& getRequestItems();
    bool requestItemsIsSet() const;
    void unsetRequestItems();
    void setRequestItems(std::vector<std::shared_ptr<SqlInjectionCheckRequestItem>> value);
    /// <summary>
    /// Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended).
    /// </summary>
    utility::string_t getDetectionLevel() const;
    bool detectionLevelIsSet() const;
    void unsetDetectionLevel();
    void setDetectionLevel(utility::string_t value);

protected:
    std::vector<std::shared_ptr<SqlInjectionCheckRequestItem>> m_RequestItems;
    bool m_RequestItemsIsSet;
    utility::string_t m_DetectionLevel;
    bool m_DetectionLevelIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_SqlInjectionCheckBatchRequest_H_ */
