/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ValidateIdentifierRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ValidateIdentifierRequest::ValidateIdentifierRequest()
{
    m_Input = utility::conversions::to_string_t("");
    m_InputIsSet = false;
    m_AllowWhitespace = false;
    m_AllowWhitespaceIsSet = false;
    m_AllowHyphens = false;
    m_AllowHyphensIsSet = false;
    m_AllowUnderscore = false;
    m_AllowUnderscoreIsSet = false;
    m_AllowNumbers = false;
    m_AllowNumbersIsSet = false;
    m_AllowPeriods = false;
    m_AllowPeriodsIsSet = false;
    m_MaxLength = 0;
    m_MaxLengthIsSet = false;
    m_MinLength = 0;
    m_MinLengthIsSet = false;
}

ValidateIdentifierRequest::~ValidateIdentifierRequest()
{
}

void ValidateIdentifierRequest::validate()
{
    // TODO: implement validation
}

web::json::value ValidateIdentifierRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_InputIsSet)
    {
        val[utility::conversions::to_string_t("Input")] = ModelBase::toJson(m_Input);
    }
    if(m_AllowWhitespaceIsSet)
    {
        val[utility::conversions::to_string_t("AllowWhitespace")] = ModelBase::toJson(m_AllowWhitespace);
    }
    if(m_AllowHyphensIsSet)
    {
        val[utility::conversions::to_string_t("AllowHyphens")] = ModelBase::toJson(m_AllowHyphens);
    }
    if(m_AllowUnderscoreIsSet)
    {
        val[utility::conversions::to_string_t("AllowUnderscore")] = ModelBase::toJson(m_AllowUnderscore);
    }
    if(m_AllowNumbersIsSet)
    {
        val[utility::conversions::to_string_t("AllowNumbers")] = ModelBase::toJson(m_AllowNumbers);
    }
    if(m_AllowPeriodsIsSet)
    {
        val[utility::conversions::to_string_t("AllowPeriods")] = ModelBase::toJson(m_AllowPeriods);
    }
    if(m_MaxLengthIsSet)
    {
        val[utility::conversions::to_string_t("MaxLength")] = ModelBase::toJson(m_MaxLength);
    }
    if(m_MinLengthIsSet)
    {
        val[utility::conversions::to_string_t("MinLength")] = ModelBase::toJson(m_MinLength);
    }

    return val;
}

void ValidateIdentifierRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Input")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Input")];
        if(!fieldValue.is_null())
        {
            setInput(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("AllowWhitespace")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("AllowWhitespace")];
        if(!fieldValue.is_null())
        {
            setAllowWhitespace(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("AllowHyphens")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("AllowHyphens")];
        if(!fieldValue.is_null())
        {
            setAllowHyphens(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("AllowUnderscore")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("AllowUnderscore")];
        if(!fieldValue.is_null())
        {
            setAllowUnderscore(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("AllowNumbers")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("AllowNumbers")];
        if(!fieldValue.is_null())
        {
            setAllowNumbers(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("AllowPeriods")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("AllowPeriods")];
        if(!fieldValue.is_null())
        {
            setAllowPeriods(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("MaxLength")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("MaxLength")];
        if(!fieldValue.is_null())
        {
            setMaxLength(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("MinLength")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("MinLength")];
        if(!fieldValue.is_null())
        {
            setMinLength(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void ValidateIdentifierRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_InputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Input"), m_Input));
        
    }
    if(m_AllowWhitespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("AllowWhitespace"), m_AllowWhitespace));
    }
    if(m_AllowHyphensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("AllowHyphens"), m_AllowHyphens));
    }
    if(m_AllowUnderscoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("AllowUnderscore"), m_AllowUnderscore));
    }
    if(m_AllowNumbersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("AllowNumbers"), m_AllowNumbers));
    }
    if(m_AllowPeriodsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("AllowPeriods"), m_AllowPeriods));
    }
    if(m_MaxLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("MaxLength"), m_MaxLength));
    }
    if(m_MinLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("MinLength"), m_MinLength));
    }
}

void ValidateIdentifierRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Input")))
    {
        setInput(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Input"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("AllowWhitespace")))
    {
        setAllowWhitespace(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("AllowWhitespace"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("AllowHyphens")))
    {
        setAllowHyphens(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("AllowHyphens"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("AllowUnderscore")))
    {
        setAllowUnderscore(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("AllowUnderscore"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("AllowNumbers")))
    {
        setAllowNumbers(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("AllowNumbers"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("AllowPeriods")))
    {
        setAllowPeriods(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("AllowPeriods"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("MaxLength")))
    {
        setMaxLength(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("MaxLength"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("MinLength")))
    {
        setMinLength(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("MinLength"))));
    }
}

utility::string_t ValidateIdentifierRequest::getInput() const
{
    return m_Input;
}


void ValidateIdentifierRequest::setInput(utility::string_t value)
{
    m_Input = value;
    m_InputIsSet = true;
}
bool ValidateIdentifierRequest::inputIsSet() const
{
    return m_InputIsSet;
}

void ValidateIdentifierRequest::unsetInput()
{
    m_InputIsSet = false;
}

bool ValidateIdentifierRequest::isAllowWhitespace() const
{
    return m_AllowWhitespace;
}


void ValidateIdentifierRequest::setAllowWhitespace(bool value)
{
    m_AllowWhitespace = value;
    m_AllowWhitespaceIsSet = true;
}
bool ValidateIdentifierRequest::allowWhitespaceIsSet() const
{
    return m_AllowWhitespaceIsSet;
}

void ValidateIdentifierRequest::unsetAllowWhitespace()
{
    m_AllowWhitespaceIsSet = false;
}

bool ValidateIdentifierRequest::isAllowHyphens() const
{
    return m_AllowHyphens;
}


void ValidateIdentifierRequest::setAllowHyphens(bool value)
{
    m_AllowHyphens = value;
    m_AllowHyphensIsSet = true;
}
bool ValidateIdentifierRequest::allowHyphensIsSet() const
{
    return m_AllowHyphensIsSet;
}

void ValidateIdentifierRequest::unsetAllowHyphens()
{
    m_AllowHyphensIsSet = false;
}

bool ValidateIdentifierRequest::isAllowUnderscore() const
{
    return m_AllowUnderscore;
}


void ValidateIdentifierRequest::setAllowUnderscore(bool value)
{
    m_AllowUnderscore = value;
    m_AllowUnderscoreIsSet = true;
}
bool ValidateIdentifierRequest::allowUnderscoreIsSet() const
{
    return m_AllowUnderscoreIsSet;
}

void ValidateIdentifierRequest::unsetAllowUnderscore()
{
    m_AllowUnderscoreIsSet = false;
}

bool ValidateIdentifierRequest::isAllowNumbers() const
{
    return m_AllowNumbers;
}


void ValidateIdentifierRequest::setAllowNumbers(bool value)
{
    m_AllowNumbers = value;
    m_AllowNumbersIsSet = true;
}
bool ValidateIdentifierRequest::allowNumbersIsSet() const
{
    return m_AllowNumbersIsSet;
}

void ValidateIdentifierRequest::unsetAllowNumbers()
{
    m_AllowNumbersIsSet = false;
}

bool ValidateIdentifierRequest::isAllowPeriods() const
{
    return m_AllowPeriods;
}


void ValidateIdentifierRequest::setAllowPeriods(bool value)
{
    m_AllowPeriods = value;
    m_AllowPeriodsIsSet = true;
}
bool ValidateIdentifierRequest::allowPeriodsIsSet() const
{
    return m_AllowPeriodsIsSet;
}

void ValidateIdentifierRequest::unsetAllowPeriods()
{
    m_AllowPeriodsIsSet = false;
}

int32_t ValidateIdentifierRequest::getMaxLength() const
{
    return m_MaxLength;
}


void ValidateIdentifierRequest::setMaxLength(int32_t value)
{
    m_MaxLength = value;
    m_MaxLengthIsSet = true;
}
bool ValidateIdentifierRequest::maxLengthIsSet() const
{
    return m_MaxLengthIsSet;
}

void ValidateIdentifierRequest::unsetMaxLength()
{
    m_MaxLengthIsSet = false;
}

int32_t ValidateIdentifierRequest::getMinLength() const
{
    return m_MinLength;
}


void ValidateIdentifierRequest::setMinLength(int32_t value)
{
    m_MinLength = value;
    m_MinLengthIsSet = true;
}
bool ValidateIdentifierRequest::minLengthIsSet() const
{
    return m_MinLengthIsSet;
}

void ValidateIdentifierRequest::unsetMinLength()
{
    m_MinLengthIsSet = false;
}

}
}
}
}

