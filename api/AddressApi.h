/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.5.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * AddressApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_AddressApi_H_
#define IO_SWAGGER_CLIENT_API_AddressApi_H_


#include "../ApiClient.h"

#include "GetTimezonesRequest.h"
#include "GetTimezonesResponse.h"
#include "ParseAddressRequest.h"
#include "ParseAddressResponse.h"
#include "ValidateCountryRequest.h"
#include "ValidateCountryResponse.h"

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  AddressApi
{
public:
    AddressApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~AddressApi();
    /// <summary>
    /// Validate and normalize country information, return ISO 3166-1 country codes and country name
    /// </summary>
    /// <remarks>
    /// Validates and normalizes country information, and returns key information about a country.  Also returns distinct time zones in the country.
    /// </remarks>
    /// <param name="input">Input request</param>
    pplx::task<std::shared_ptr<ValidateCountryResponse>> addressCountry(
        std::shared_ptr<ValidateCountryRequest> input
    );
    /// <summary>
    /// Gets IANA/Olsen time zones for a country
    /// </summary>
    /// <remarks>
    /// Gets the IANA/Olsen time zones for a country.
    /// </remarks>
    /// <param name="input">Input request</param>
    pplx::task<std::shared_ptr<GetTimezonesResponse>> addressGetTimezone(
        std::shared_ptr<GetTimezonesRequest> input
    );
    /// <summary>
    /// Parse an unstructured input text string into an international, formatted address
    /// </summary>
    /// <remarks>
    /// Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.
    /// </remarks>
    /// <param name="input">Input parse request</param>
    pplx::task<std::shared_ptr<ParseAddressResponse>> addressParseString(
        std::shared_ptr<ParseAddressRequest> input
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_AddressApi_H_ */

