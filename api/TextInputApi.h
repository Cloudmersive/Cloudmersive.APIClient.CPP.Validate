/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TextInputApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_TextInputApi_H_
#define IO_SWAGGER_CLIENT_API_TextInputApi_H_


#include "../ApiClient.h"

#include "HtmlSsrfDetectionResult.h"
#include "SqlInjectionCheckBatchRequest.h"
#include "SqlInjectionCheckBatchResponse.h"
#include "SqlInjectionDetectionResult.h"
#include "XssProtectionBatchRequest.h"
#include "XssProtectionBatchResponse.h"
#include "XssProtectionResult.h"
#include "XxeDetectionBatchRequest.h"
#include "XxeDetectionBatchResponse.h"
#include "XxeDetectionResult.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  TextInputApi
{
public:
    TextInputApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~TextInputApi();
    /// <summary>
    /// Protect html input from Server-side Request Forgery (SSRF) attacks
    /// </summary>
    /// <remarks>
    /// Detects SSRF (Server-side request forgery) attacks and unsafe URL attacks from HTML text input, where attackers can attempt to access unsafe local or network paths in the server environment by injecting them into HTML.
    /// </remarks>
    /// <param name="value">User-facing HTML input.</param>
    /// <param name="allowCidScheme">Optional: Set to true to allow cid: scheme URLs for email message attachments.  Default is false. (optional)</param>
    pplx::task<std::shared_ptr<HtmlSsrfDetectionResult>> textInputCheckHtmlSsrf(
        utility::string_t value,
        boost::optional<bool> allowCidScheme
    );
    /// <summary>
    /// Check text input for SQL Injection (SQLI) attacks
    /// </summary>
    /// <remarks>
    /// Detects SQL Injection (SQLI) attacks from text input.
    /// </remarks>
    /// <param name="value">User-facing text input.</param>
    /// <param name="detectionLevel">Set to Normal to target a high-security SQL Injection detection level with a very low false positive rate; select High to target a very-high security SQL Injection detection level with higher false positives.  Default is Normal (recommended). (optional)</param>
    pplx::task<std::shared_ptr<SqlInjectionDetectionResult>> textInputCheckSqlInjection(
        utility::string_t value,
        boost::optional<utility::string_t> detectionLevel
    );
    /// <summary>
    /// Check and protect multiple text inputs for SQL Injection (SQLI) attacks in batch
    /// </summary>
    /// <remarks>
    /// Detects SQL Injection (SQLI) attacks from multiple text inputs.  Output preverses order of input items.
    /// </remarks>
    /// <param name="value">User-facing text input.</param>
    pplx::task<std::shared_ptr<SqlInjectionCheckBatchResponse>> textInputCheckSqlInjectionBatch(
        std::shared_ptr<SqlInjectionCheckBatchRequest> value
    );
    /// <summary>
    /// Check text input for Cross-Site-Scripting (XSS) attacks
    /// </summary>
    /// <remarks>
    /// Detects XSS (Cross-Site-Scripting) attacks from text input.
    /// </remarks>
    /// <param name="value">User-facing text input.</param>
    pplx::task<std::shared_ptr<XssProtectionResult>> textInputCheckXss(
        utility::string_t value
    );
    /// <summary>
    /// Check and protect multiple text inputs for Cross-Site-Scripting (XSS) attacks in batch
    /// </summary>
    /// <remarks>
    /// Detects XSS (Cross-Site-Scripting) attacks from multiple text inputs.  Output preverses order of input items.
    /// </remarks>
    /// <param name="value">User-facing text input.</param>
    pplx::task<std::shared_ptr<XssProtectionBatchResponse>> textInputCheckXssBatch(
        std::shared_ptr<XssProtectionBatchRequest> value
    );
    /// <summary>
    /// Protect text input from XML External Entity (XXE) attacks
    /// </summary>
    /// <remarks>
    /// Detects XXE (XML External Entity) attacks from text input.
    /// </remarks>
    /// <param name="value">User-facing text input.</param>
    /// <param name="allowInternetUrls">Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false. (optional)</param>
    /// <param name="knownSafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe. (optional)</param>
    /// <param name="knownUnsafeUrls">Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe. (optional)</param>
    pplx::task<std::shared_ptr<XxeDetectionResult>> textInputCheckXxe(
        utility::string_t value,
        boost::optional<bool> allowInternetUrls,
        boost::optional<utility::string_t> knownSafeUrls,
        boost::optional<utility::string_t> knownUnsafeUrls
    );
    /// <summary>
    /// Protect text input from XML External Entity (XXE) attacks
    /// </summary>
    /// <remarks>
    /// Detects XXE (XML External Entity) attacks from text input.
    /// </remarks>
    /// <param name="request"></param>
    pplx::task<std::shared_ptr<XxeDetectionBatchResponse>> textInputCheckXxeBatch(
        std::shared_ptr<XxeDetectionBatchRequest> request
    );
    /// <summary>
    /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
    /// </summary>
    /// <remarks>
    /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
    /// </remarks>
    /// <param name="value">User-facing text input.</param>
    pplx::task<std::shared_ptr<XssProtectionResult>> textInputProtectXss(
        utility::string_t value
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_TextInputApi_H_ */

