/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DomainApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_DomainApi_H_
#define IO_SWAGGER_CLIENT_API_DomainApi_H_


#include "../ApiClient.h"

#include "CheckResponse.h"
#include "DomainQualityResponse.h"
#include "IsAdminPathResponse.h"
#include "PhishingCheckRequest.h"
#include "PhishingCheckResponse.h"
#include "UrlHtmlSsrfRequestFull.h"
#include "UrlHtmlSsrfResponseFull.h"
#include "UrlSafetyCheckRequestFull.h"
#include "UrlSafetyCheckResponseFull.h"
#include "UrlSsrfRequestBatch.h"
#include "UrlSsrfRequestFull.h"
#include "UrlSsrfResponseBatch.h"
#include "UrlSsrfResponseFull.h"
#include "ValidateUrlRequestFull.h"
#include "ValidateUrlRequestSyntaxOnly.h"
#include "ValidateUrlResponseFull.h"
#include "ValidateUrlResponseSyntaxOnly.h"
#include "WhoisResponse.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  DomainApi
{
public:
    DomainApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~DomainApi();
    /// <summary>
    /// Validate a domain name
    /// </summary>
    /// <remarks>
    /// Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
    /// </remarks>
    /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
    pplx::task<std::shared_ptr<CheckResponse>> domainCheck(
        utility::string_t domain
    );
    /// <summary>
    /// Get top-level domain name from URL
    /// </summary>
    /// <remarks>
    /// Gets the top-level domain name from a URL, such as mydomain.com.
    /// </remarks>
    /// <param name="request">Input URL information</param>
    pplx::task<std::shared_ptr<ValidateUrlResponseSyntaxOnly>> domainGetTopLevelDomainFromUrl(
        std::shared_ptr<ValidateUrlRequestSyntaxOnly> request
    );
    /// <summary>
    /// Check if path is a high-risk or vulnerable server administration path
    /// </summary>
    /// <remarks>
    /// Check if the input URL or relative path is a server Administration Path, and therefore a risk or vulnerability for remote access.
    /// </remarks>
    /// <param name="value">URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
    pplx::task<std::shared_ptr<IsAdminPathResponse>> domainIsAdminPath(
        utility::string_t value
    );
    /// <summary>
    /// Check a URL for Phishing threats
    /// </summary>
    /// <remarks>
    /// Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
    /// </remarks>
    /// <param name="request">Input URL request</param>
    pplx::task<std::shared_ptr<PhishingCheckResponse>> domainPhishingCheck(
        std::shared_ptr<PhishingCheckRequest> request
    );
    /// <summary>
    /// Get WHOIS information for a domain
    /// </summary>
    /// <remarks>
    /// Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
    /// </remarks>
    /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.</param>
    pplx::task<std::shared_ptr<WhoisResponse>> domainPost(
        utility::string_t domain
    );
    /// <summary>
    /// Validate a domain name&#39;s quality score
    /// </summary>
    /// <remarks>
    /// Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
    /// </remarks>
    /// <param name="domain">Domain name to check, for example \&quot;cloudmersive.com\&quot;.</param>
    pplx::task<std::shared_ptr<DomainQualityResponse>> domainQualityScore(
        utility::string_t domain
    );
    /// <summary>
    /// Check a URL for safety threats
    /// </summary>
    /// <remarks>
    /// Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
    /// </remarks>
    /// <param name="request">Input URL request</param>
    pplx::task<std::shared_ptr<UrlSafetyCheckResponseFull>> domainSafetyCheck(
        std::shared_ptr<UrlSafetyCheckRequestFull> request
    );
    /// <summary>
    /// Check a URL for SSRF threats
    /// </summary>
    /// <remarks>
    /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
    /// </remarks>
    /// <param name="request">Input URL request</param>
    pplx::task<std::shared_ptr<UrlSsrfResponseFull>> domainSsrfCheck(
        std::shared_ptr<UrlSsrfRequestFull> request
    );
    /// <summary>
    /// Check a URL for SSRF threats in batches
    /// </summary>
    /// <remarks>
    /// Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
    /// </remarks>
    /// <param name="request">Input URL request as a batch of multiple URLs</param>
    pplx::task<std::shared_ptr<UrlSsrfResponseBatch>> domainSsrfCheckBatch(
        std::shared_ptr<UrlSsrfRequestBatch> request
    );
    /// <summary>
    /// Validate a URL fully
    /// </summary>
    /// <remarks>
    /// Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
    /// </remarks>
    /// <param name="request">Input URL request</param>
    pplx::task<std::shared_ptr<ValidateUrlResponseFull>> domainUrlFull(
        std::shared_ptr<ValidateUrlRequestFull> request
    );
    /// <summary>
    /// Check a URL for HTML embedded SSRF threats
    /// </summary>
    /// <remarks>
    /// Checks if an input URL HTML is at risk of containing one or more embedded SSRF (Server-side request forgery) threats or attacks.
    /// </remarks>
    /// <param name="request">Input URL request</param>
    pplx::task<std::shared_ptr<UrlHtmlSsrfResponseFull>> domainUrlHtmlSsrfCheck(
        std::shared_ptr<UrlHtmlSsrfRequestFull> request
    );
    /// <summary>
    /// Validate a URL syntactically
    /// </summary>
    /// <remarks>
    /// Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
    /// </remarks>
    /// <param name="request">Input URL information</param>
    pplx::task<std::shared_ptr<ValidateUrlResponseSyntaxOnly>> domainUrlSyntaxOnly(
        std::shared_ptr<ValidateUrlRequestSyntaxOnly> request
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_DomainApi_H_ */

